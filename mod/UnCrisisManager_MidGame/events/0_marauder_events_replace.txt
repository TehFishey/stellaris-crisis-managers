#########################################
#########################################
#####		Marauder Events			#####
#####	Khan (Horde Crisis) Events	#####
#####	Vanilla by Henrik Thyrwall	#####
#####	Replaced by Crisis Manager	#####
#####	Edited by FirePrince		#####
#########################################
#########################################
namespace = marauder
#
# Check all events: has_country_flag = marauder_x (x = 1 - 3)
#
# Adding marauder.27 .29

###################
###- Constants -###
###################

### Critical (Lifespan of Khan, debug code)
@CmtConstKhanLifespan_1a =	1		### Minimun Lifespan / day
@CmtConstKhanLifespan_1b =	0.025	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_1c =	35		### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_1d =	5		### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_1e =	8		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_1f =	4		### Time-Lag of Post-Death Process (random = 1f)

### Fleeting (Lifespan of Khan)
@CmtConstKhanLifespan_2a =	4320	### Minimun Lifespan / day
@CmtConstKhanLifespan_2b =	0.75	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_2c =	7200	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_2d =	2880	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_2e =	90		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_2f =	60		### Time-Lag of Post-Death Process (random = 1f)

### Standard (Lifespan of Khan)
@CmtConstKhanLifespan_3a =	7200	### Minimun Lifespan / day
@CmtConstKhanLifespan_3b =	1.00	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_3c =	10800	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_3d =	5000	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_3e =	200		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_3f =	100		### Time-Lag of Post-Death Process (random = 1f)

### Enduring (Lifespan of Khan)
@CmtConstKhanLifespan_4a =	10800	### Minimun Lifespan / day
@CmtConstKhanLifespan_4b =	3.00	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_4c =	16200	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_4d =	5400	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_4e =	270		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_4f =	180		### Time-Lag of Post-Death Process (random = 1f)

### Venerable (Lifespan of Khan)
@CmtConstKhanLifespan_5a =	18000	### Minimun Lifespan / day
@CmtConstKhanLifespan_5b =	5.00	### Probability of Death (2%/month for 1)
@CmtConstKhanLifespan_5c =	27000	### Maximun Lifespan / day (days = 1c)
@CmtConstKhanLifespan_5d =	9000	### Maximun Lifespan / day (random = 1d)
@CmtConstKhanLifespan_5e =	360		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_5f =	360		### Time-Lag of Post-Death Process (random = 1f)

### Immortality (Lifespan of Khan): Directly Written in Event/Effect
@CmtConstKhanLifespan_6e =	360		### Time-Lag of Post-Death Process (days = 1e)
@CmtConstKhanLifespan_6f =	360		### Time-Lag of Post-Death Process (random = 1f)

### Marauders Destroyed (HIDDEN) on_ship_destroyed_victim
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# fromfrom = ship 1
# fromfromfrom = ship 2
country_event = {
	id = marauder.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = dormant_marauders
		count_owned_ship = {
			limit = { is_ship_size = marauder_void_dwelling }
			count = 0
		}
		OR = {
			AND = { # Last ship is Void Dwelling.
				fromfrom = { is_ship_size = marauder_void_dwelling }
				num_starbases = 0
			}
			AND = { # Last ship is Starbase
				fromfrom = { is_ship_size = starbase_marauder }
				num_starbases < 2 # Last one still counts as alive when this fires.
			}
			count_owned_ship = {
				limit = { is_ship_size = starbase_marauder }
				count = 0
			}
		}
	}

	immediate = {
		from = { save_event_target_as = marauder_killer }
		owner_species = { save_event_target_as = marauder_species }
		fromfromfrom.solar_system = { save_event_target_as = marauder_system }
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = root
			}
			country_event = { id = marauder.5 }			# Notify
		}
		random_relation = {
			limit = {
				merg_is_default_empire = yes
				has_policy_flag = refugees_allowed
				has_communications = root
			}
			country_event = { id = marauder.9 days = 10 random = 10 } # Refugees
		}

		# Vengeance if Mercenaries hired
		if = {
			limit = {
				from = { merg_is_default_empire = yes }
				OR = {
					has_country_flag = merc_fleet_1_hired
					has_country_flag = merc_fleet_2_hired
					has_country_flag = merc_fleet_3_hired
				}
			}
			from = {
				country_event = { id = marauder.6 days = 100 random = 50 }
				if = {
					limit = {
						exists = fromfrom
						exists = fromfrom.solar_system
					}
					fromfrom.solar_system = {
						save_event_target_as = attacked_system
						random_system_planet = {
							limit = { is_star = no }
							weights = {
								base = 1
								# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
								modifier = { add = 1 is_colonizable = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			# Mercenary Desertions (Marauder 1)
			if = { limit = { has_country_flag = marauder_1 }
				every_playable_country = {
					limit = { any_controlled_fleet = { CmtTriggerHiredMarauderFleet1 = yes } }
					set_country_flag = CmtFlagHiringMarauder1
					country_event = { id = marauder.76 days = 20 random = 20 }
				}
				if = { limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint } }
					random_system = {
						limit = {
							has_star_flag = marauder_system
							OR = {
								has_owner = no
								is_owned_by = root
							}
						}
						weights = {
							base = 1
							modifier = { add = 3 has_star_flag = marauder_capital_1 }
						}
						random_system_planet = {
							limit = { is_star = no }
							weights = {
								base = 1
								# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
								modifier = { add = 1 is_colonizable = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			# Mercenary Desertions (Marauder 2)
			else_if = { limit = { has_country_flag = marauder_2 }
				every_playable_country = {
					limit = { any_controlled_fleet = { CmtTriggerHiredMarauderFleet2 = yes } }
					country_event = { id = marauder.76 days = 20 random = 20 }
				}
				if = { limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint } }
					random_system = {
						limit = {
							has_star_flag = marauder_system
							OR = {
								has_owner = no
								is_owned_by = root
							}
						}
						weights = {
							base = 1
							modifier = { add = 3 has_star_flag = marauder_capital_2 }
						}
						random_system_planet = {
							limit = { is_star = no }
							weights = {
								base = 1
								# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
								modifier = { add = 1 is_colonizable = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			# Mercenary Desertions (Marauder 3)
			else_if = { limit = { has_country_flag = marauder_3 }
				every_playable_country = {
					limit = { any_controlled_fleet = { CmtTriggerHiredMarauderFleet3 = yes } }
					country_event = { id = marauder.76 days = 20 random = 20 }
				}
				if = { limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint } }
					random_system = {
						limit = {
							has_star_flag = marauder_system
							OR = {
								has_owner = no
								is_owned_by = root
							}
						}
						weights = {
							base = 1
							modifier = { add = 3 has_star_flag = marauder_capital_3 }
						}
						random_system_planet = {
							limit = { is_star = no }
							weights = {
								base = 1
								# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
								modifier = { add = 3 has_planet_flag = raid_source }
								modifier = { add = 2 is_colony = yes }
								modifier = { add = 1 is_colonizable = yes }
							}
							save_global_event_target_as = CmtTargetMarauderRallyPoint
						}
					}
				}
			}
			set_country_type = ruined_marauders			# Kill diplomacy
			# Only to be sure, superfluous?
			if = { limit = { NOT = { is_hostile = from } }
				set_faction_hostility = {
					target = from
					set_hostile = yes
				}
			}
		} else = {
			every_owned_megastructure = { set_ruined_megastructure = yes }
			destroy_country = yes
		}
	}
}

# Marauder Vengeance
country_event = {
	id = marauder.8
	title = "marauder.6.name"
	desc = "marauder.8.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	location = event_target:attacked_system
	is_triggered_only = yes
	option = { name = DISCONCERTING }
	after = {
		hidden_effect = {
			if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint }
				clear_global_event_target = CmtTargetMarauderRallyPoint
			}
		}
	}
}

## Jump fleet to raid target.
# From = marauder_target
fleet_event = {
	id = marauder.27
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		closest_system = {
			min_steps = 2
			use_bypasses = yes
			limit = {
				any_system_colony = {
					is_owned_by = from
					num_pops > 1
				}
			}
			random_system_colony = {
				limit = {
					is_owned_by = from
					num_pops > 1
				}
				save_event_target_as = raid_planet
			}
		}

		if = { limit = { exists = event_target:raid_planet }
			set_location = {
				target = event_target:raid_planet
				distance = 45
				angle = random
			}
			auto_move_to_planet = {
				target = event_target:raid_planet
				clear_auto_move_on_arrival = no
			}
		}
	}
}

# Seeks a viable target if the actual target is not accesible (fallback)
# From = country marauder_raid_target
fleet_event = {
	id = marauder.29
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# exists = event_target:raid_planet
		exists = from
	}
	immediate = {
		# log="Try fallback routing"
		# First try to find alternate path (new raid target)
		closest_system = {
			min_steps = 1
			use_bypasses = yes
			limit = {
				any_system_colony = {
					is_owned_by = from
					num_pops > 1
				}
				prev = { can_access_system = prev }
			}
			random_system_colony = {
				limit = {
					is_owned_by = from
					num_pops > 1
				}
				save_event_target_as = attacked_planet
			}
		}
		if = { limit = { exists = event_target:attacked_planet }
			clear_orders = yes
			remove_auto_move_target = yes
			clear_fleet_actions = this
			auto_move_to_planet = {
				target = event_target:attacked_planet
				clear_auto_move_on_arrival = no
			}
			# log ="Take new raid target \\[This.System.GetName]"
			break = yes
		}

		# TODO # Get (max) distance (export works but not import so search must be step for step)
		# export_trigger_value_to_variable = {
		# 	trigger = distance
		# 	parameters = {
		# 		source = event_target:raid_planet
		# 		min_distance > 5
		# 		type = hyperlane
		# 		bypass_empire = root.owner
		# 		min_jumps = 1
		# 	}
		# 	variable = raid_target_distance
		# }
		# log="raid_target_distance \\[Root.raid_target_distance]"

		closest_system = {
			min_steps = 1
			# max_steps = 40
			use_bypasses = yes
			limit = {
				has_owner = yes
				is_owned_by = from
				exists = starbase
				starbase = {
					has_starbase_size > starbase_outpost
					fleet = { is_disabled = no }					# Not working for starbase?
				}
				NOR = {
					any_system_colony = {
						is_owned_by = from
						num_pops > 0
					}
				}
				root = { can_access_system = prev }
			}
			save_event_target_as = target_system
		}

		if = {
			limit = {
				NAND = {
					exists = event_target:target_system
					can_access_system = event_target:target_system
				}
			}
			# Find bottleneck system between.
			closest_system = {
				min_steps = 1
				# max_steps = 40
				use_bypasses = yes
				limit = {
					exists = owner
					owner = {
						NOR = {
							is_fallen_empire = yes
							is_same_empire = root.owner
						}
						is_hostile = root.owner
					}
					exists = starbase
					starbase = {
						has_starbase_size > starbase_outpost
						fleet = { is_disabled = no }						# Not working for starbase?
					}
					NOR = {
						is_owned_by = root.owner
						has_star_flag = guardian
						has_star_flag = extradimensional_origin_system
					}
					# distance_compare = { MAX = "[root.raid_target_distance]" }
					# distance = {
					# 	source = event_target:raid_planet
					# 	min_distance > 5
					# 	max_distance < root.raid_target_distance
					# 	type = hyperlane
					# 	bypass_empire = root.owner
					# 	# min_jumps = 1
					# }
					root = { can_access_system = prev }
				}
				save_event_target_as = target_system
			}
		}
		owner = {
			if = {
				limit = {
					exists = event_target:target_system
					event_target:target_system = {
						NOT = { is_owned_by = from }
						space_owner = { is_country_type_with_subjects = yes }
					}
					is_hostile = event_target:target_system.space_owner
					opinion = {
						who = event_target:target_system.space_owner
						value > -150
					}
				}
				set_faction_hostility = {
					target = event_target:target_system.space_owner
					set_neutral = yes
				}
			}
		}

		if = {
			limit = {
				exists = event_target:target_system
				can_access_system = event_target:target_system
			}
			# clear_orders = yes
			# remove_auto_move_target = yes
			# clear_fleet_actions = this
			event_target:target_system = {
				random_system_planet = {
					weights = {
						base = 1
						modifier = {
							add = 30
							has_owner = yes
							is_owned_by = from
							is_colony = yes
						}
						modifier = { add = 3 has_owner = yes }
					}
					root = {
						auto_move_to_planet = {
							target = prev
							clear_auto_move_on_arrival = no
						}
						fleet_event = { id = marauder.29 days = 100 random = 25 scopes = { from = from } }
					}
					# log ="\\[Root.Owner.GetName] take new raid target \\[This.GetName]"
				}
			}
		} else = {
			fleet_event = { id = marauder.27 days = 100 random = 25 scopes = { from = from } }
			# log="Fallback jump marauder fleet \\[This.GetName]"
		}
	}
}

# Hire Mercenaries
# Vanilla Fixed by FirePrince: do not spawn fleets instantly
# From = current_marauder_diplomacy
country_event = {
	id = marauder.34
	title = "marauder_diplo_header"
	desc = {
		text = marauder.34.1.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
		}
	}
	desc = {
		text = marauder.34.2.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
		}
	}
	desc = {
		text = marauder.34.3.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = {
				NOT = { exists = event_target:current_marauder_diplomacy }
				from = { is_country_type = dormant_marauders }
			}
			from = { save_event_target_as = current_marauder_diplomacy }
		}
		event_target:current_marauder_diplomacy = { owner_species = { save_event_target_as = marauder_species } }
		## Dynamic hiring costs TODO needs update each effect.
		# event_target:current_marauder_diplomacy = {
		# 	set_pirates_difficulty = yes
		# 	set_variable = { which = largemerccost value = @largemerccost }
		# 	set_variable = { which = mediummerccost value = @mediummerccost }
		# 	set_variable = { which = smallmerccost value = @smallmerccost }
		#	multiply_variable = { which = pirates_factor value = 1.5 } # As it is only half for marauders.
		# 	# switch = { # Price depending on difficulty?
		# 	# 	trigger = has_country_flag
		# 	# 	pirate_waves_very_easy = {
		# 	# 		multiply_variable = { which = pirates_factor value = 0.5 }
		# 	# 	}
		# 	# 	pirate_waves_easy = {
		# 	# 		multiply_variable = { which = pirates_factor value = 0.75 }
		# 	# 	}
		# 	# 	ships_count_hard = {
		# 	# 		multiply_variable = { which = pirates_factor value = 1.25 }
		# 	# 	}
		# 	# 	pirate_waves_insane = {
		# 	# 		multiply_variable = { which = pirates_factor value = 1.5 }
		# 	# 	}
		# 	# }
		# 	multiply_variable = { which = largemerccost value = pirates_factor }
		# 	multiply_variable = { which = mediummerccost value = pirates_factor }
		# 	multiply_variable = { which = smallmerccost value = pirates_factor }
		# }

	}
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	# Hire Armada of the Voidborn.
	option = {
		name = marauder.34.1.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @largemercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
				}
			}
		}
		add_resource = { energy = @largemerccost }
		custom_tooltip = voidborn_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_1_hired }
			set_country_flag = merc_fleet_1_1_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Star Rider Flotilla
	option = {
		name = marauder.34.1.b
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired } }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @mediummercallow }
			hidden_trigger = {
				NOT = { event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired } }
			}
		}
		add_resource = { energy = @mediummerccost }
		custom_tooltip = star_riders_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_2_hired }
			set_country_flag = merc_fleet_2_1_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire First Storm Wing
	option = {
		name = marauder.34.1.c
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired } }
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @smallmercallow }
			hidden_trigger = {
				NOT = { event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired } }
			}
		}
		add_resource = { energy = @smallmerccost }
		custom_tooltip = storm_wing_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_3_hired }
			set_country_flag = merc_fleet_3_1_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire 234th Dwamak-Bashers
	option = {
		name = marauder.34.2.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @largemercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
				}
			}
		}
		add_resource = { energy = @largemerccost }
		custom_tooltip = voidborn_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_1_hired }
			set_country_flag = merc_fleet_1_2_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Unhinged Screamer Flotilla
	option = {
		name = marauder.34.2.b
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @mediummercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
				}
			}
		}
		add_resource = { energy = @mediummerccost }
		custom_tooltip = star_riders_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_2_hired }
			set_country_flag = merc_fleet_2_2_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Frenzied Volunteer Squadron
	option = {
		name = marauder.34.2.c
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @smallmercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
				}
			}
		}
		add_resource = { energy = @smallmerccost }
		custom_tooltip = storm_wing_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_3_hired }
			set_country_flag = merc_fleet_3_2_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Her Chosen Champions
	option = {
		name = marauder.34.3.a
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @largemercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_1_hired }
				}
			}
		}
		add_resource = { energy = @largemerccost }
		custom_tooltip = voidborn_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_1_hired }
			set_country_flag = merc_fleet_1_3_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Order of Eternal Night.
	option = {
		name = marauder.34.3.b
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @mediummercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_2_hired }
				}
			}
		}
		add_resource = { energy = @mediummerccost }
		custom_tooltip = star_riders_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_2_hired }
			set_country_flag = merc_fleet_2_3_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	# Hire Twilight Congregation
	option = {
		name = marauder.34.3.c
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
			NOT = {
				event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
			}
		}
		allow = {
			resource_stockpile_compare = { resource = energy value > @smallmercallow }
			hidden_trigger = {
				NOT = {
					event_target:current_marauder_diplomacy = { has_country_flag = merc_fleet_3_hired }
				}
			}
		}
		add_resource = { energy = @smallmerccost }
		custom_tooltip = storm_wing_hire
		hidden_effect = {
			event_target:current_marauder_diplomacy = { set_country_flag = merc_fleet_3_hired }
			set_country_flag = merc_fleet_3_3_hired
			country_event = { id = marauder.37 scopes = { from = event_target:current_marauder_diplomacy } }
		}
	}
	option = {
		name = marauder.34.d
		hidden_effect = {
			if = { limit = { NOT = { has_active_event = { marauder.21 } } }
				country_event = { id = marauder.21 scopes = { from = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.34.e
		default_hide_option = yes
	}
}


# Mercenary Fleet Hired
# From = current_marauder_diplomacy
country_event = {
	id = marauder.37
	title = "marauder_diplo_header"
	desc = {
		text = marauder.37.1.a.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			any_relation = { is_fallen_empire = yes }
		}
	}
	desc = {
		text = marauder.37.1.b.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_1 }
			NOT = { any_relation = { is_fallen_empire = yes } }
		}
	}
	desc = {
		text = marauder.37.2.a.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_2 }
		}
	}
	desc = {
		text = marauder.37.3.a.desc
		trigger = {
			event_target:current_marauder_diplomacy = { has_country_flag = marauder_3 }
		}
	}
	diplomatic = yes
	picture_event_data = {
		portrait = event_target:current_marauder_diplomacy
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		set_country_flag = marauder_diplomacy_engaged
		if = {
			limit = {
				NOT = { exists = event_target:current_marauder_diplomacy }
				from = { is_country_type = dormant_marauders }
			}
			from = { save_event_target_as = current_marauder_diplomacy }
		}
		random_relation = {
			limit = { is_fallen_empire = yes }
			save_event_target_as = random_fallen_empire
		}
		# Create global Rally Point event_targets.
		event_target:current_marauder_diplomacy = {
			get_marauder_species = yes
			switch = {
				trigger = has_country_flag
				marauder_1 = {
					save_global_event_target_as = marauder_country_1
					if = { limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint1 } }
						country_event = { id = marauder.499 days = -1 }
					}
				}
				marauder_2 = {
					save_global_event_target_as = marauder_country_2
					if = { limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint2 } }
						country_event = { id = marauder.499 days = -1 }
					}
				}
				marauder_3 = {
					save_global_event_target_as = marauder_country_3
					if = { limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint3 } }
						country_event = { id = marauder.499 days = -1 }
					}
				}
			}
		}

		if = {
			limit = {
				OR = {
					is_hostile = event_target:current_marauder_diplomacy
					event_target:current_marauder_diplomacy = { is_hostile = prev }
				}
			}
			country_event = { id = marauder.38 days = 20 scopes = { from = event_target:current_marauder_diplomacy } }
		} else = {
			country_event = { id = marauder.38 scopes = { from = event_target:current_marauder_diplomacy } }			# Use mia
		}
	}
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}
	option = {
		name = marauder.37.a
		hidden_effect = {
			if = { limit = { NOT = { has_active_event = { marauder.21 } } }
				country_event = { id = marauder.21 scopes = { from = event_target:current_marauder_diplomacy } }
			}
		}
	}
	option = {
		name = marauder.37.b
		default_hide_option = yes
	}
}

# Scope = Hiring country (The Great Khan Expanded by FirePrince)
# From = current_marauder_diplomacy
country_event = {
	id = marauder.38
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = from }
	immediate = {
		if = {
			limit = {
				NOT = { exists = event_target:current_marauder_diplomacy }
				from = { is_country_type = dormant_marauders }
			}
			from = { save_event_target_as = current_marauder_diplomacy }
		}
		if = {
			limit = { exists = event_target:current_marauder_diplomacy }
			# Create global Rally Point event_targets.
			event_target:current_marauder_diplomacy = {
				get_marauder_species = yes
				switch = {
					trigger = has_country_flag
					marauder_1 = {
						save_global_event_target_as = marauder_country_1
						if = { limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint1 } }
							country_event = { id = marauder.499 days = -1 }
						}
					}
					marauder_2 = {
						save_global_event_target_as = marauder_country_2
						if = { limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint2 } }
							country_event = { id = marauder.499 days = -1 }
						}
					}
					marauder_3 = {
						save_global_event_target_as = marauder_country_3
						if = { limit = { NOT = { exists = event_target:CmtTargetMarauderRallyPoint3 } }
							country_event = { id = marauder.499 days = -1 }
						}
					}
				}
			}
		} else = { log_error = "Missing current_marauder_diplomacy" }
		switch = {
			trigger = has_country_flag
			# Hire Armada of the Voidborn.
			merc_fleet_1_1_hired = {
				remove_country_flag = merc_fleet_1_1_hired
				event_target:CmtTargetMarauderRallyPoint1 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanArmadaVoidborn = yes
						last_created_fleet = { set_fleet_flag = armada_of_the_voidborn }
					}
				}
			}
			# Hire Star Rider Flotilla
			merc_fleet_2_1_hired = {
				remove_country_flag = merc_fleet_2_1_hired
				event_target:CmtTargetMarauderRallyPoint1 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanStarRiderFlotilla = yes
						last_created_fleet = { set_fleet_flag = star_rider_flotilla }
					}
				}
			}
			# Hire First Storm Wing
			merc_fleet_3_1_hired = {
				remove_country_flag = merc_fleet_3_1_hired
				event_target:CmtTargetMarauderRallyPoint1 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanFirstStormWing = yes
						last_created_fleet = { set_fleet_flag = first_storm_wing }
					}
				}
			}
			# Hire 234th Dwamak-Bashers
			merc_fleet_1_2_hired = {
				remove_country_flag = merc_fleet_1_2_hired
				event_target:CmtTargetMarauderRallyPoint2 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanDwamakBashers = yes
						last_created_fleet = { set_fleet_flag = dwamak_bashers }
					}
				}
			}
			# Hire Unhinged Screamer Flotilla
			merc_fleet_2_2_hired = {
				remove_country_flag = merc_fleet_2_2_hired
				event_target:CmtTargetMarauderRallyPoint2 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanUnhingedScreamerFlotilla = yes
						last_created_fleet = { set_fleet_flag = unhinged_screamer_flotilla }
					}
				}
			}
			# Hire Frenzied Volunteer Squadron
			merc_fleet_3_2_hired = {
				remove_country_flag = merc_fleet_3_2_hired
				event_target:CmtTargetMarauderRallyPoint2 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanFrenziedVolunteerSquadron = yes
						last_created_fleet = { set_fleet_flag = frenzied_volunteer_squadron }
					}
				}
			}
			# Hire Her Chosen Champions
			merc_fleet_1_3_hired = {
				remove_country_flag = merc_fleet_1_3_hired
				event_target:CmtTargetMarauderRallyPoint3 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanHerChosenChampions = yes
						last_created_fleet = { set_fleet_flag = her_chosen_champions }
					}
				}
			}
			# Hire Order of Eternal Night.
			merc_fleet_2_3_hired = {
				remove_country_flag = merc_fleet_2_3_hired
				event_target:CmtTargetMarauderRallyPoint3 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanOrderEternalNight = yes
						last_created_fleet = { set_fleet_flag = order_of_eternal_night }
					}
				}
			}
			# Hire Twilight Congregation
			merc_fleet_3_3_hired = {
				remove_country_flag = merc_fleet_3_3_hired
				event_target:CmtTargetMarauderRallyPoint3 = {
					event_target:current_marauder_diplomacy = {
						CmtEffectCreateFleet_KhanTwilightCongregation = yes
						last_created_fleet = { set_fleet_flag = twilight_congregation }
					}
				}
			}
		}
		last_created_fleet = {
			save_event_target_as = hired_merc_fleet # Vanilla nowhere used??
			set_owner = root
			if = { limit = {
					OR = {
						root = { is_hostile = event_target:current_marauder_diplomacy }
						event_target:current_marauder_diplomacy = { is_hostile = root }
					}
				}
				set_location = {
					target = root.capital_scope
					distance = 25
					angle = random
				}
			}
			if = { limit = {
					exists = root.capital_star.starbase
					root.capital_star.starbase = { is_owned_by = root }
				}
				set_home_base = root.capital_star.starbase
				set_mia = yes
			} else = { set_location = root.capital_scope }
			fleet_event = { id = marauder.50 days = 1800 }
		}
	}
}

### Mercenaries Leave (Home Systems Destroyed)
# This = Hiring country
# From = Destroyed Marauders
country_event = {
	id = marauder.76
	title = "marauder.76.name"
	desc = "marauder.76.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	location = this
	is_triggered_only = yes
	immediate = {
		# Marauder 1
		if = {
			limit = {
				has_country_flag = CmtFlagHiringMarauder1
				# from = { has_country_flag = marauder_1 } not always exists
			}
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet1 = yes }
				if = { limit = { exists = from exists = event_target:CmtTargetMarauderRallyPoint }
					set_owner = from
					if = { limit = { exists = leader }
						leader = {
							remove_leader_flag = marauder_merc_leader
							set_owner = from
						}
					}
					auto_move_to_planet = {
						target = event_target:CmtTargetMarauderRallyPoint
						clear_auto_move_on_arrival = no
					}

				} else = {
					if = { limit = { exists = leader }
						leader = {
							kill_leader = { show_notification = no }
						}
					}
					delete_fleet = { target = this destroy_template = yes }
				}
			}
			remove_country_flag = CmtFlagHiringMarauder1
			break = yes
		}
		# Marauder 2
		else_if = {
			limit = {
				has_country_flag = CmtFlagHiringMarauder2
				# from = { has_country_flag = marauder_2 } not always exists
			}
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet2 = yes }
				if = { limit = { exists = from exists = event_target:CmtTargetMarauderRallyPoint }
					set_owner = from
					if = { limit = { exists = leader }
						leader = {
							remove_leader_flag = marauder_merc_leader
							set_owner = from
						}
					}
					auto_move_to_planet = {
						target = event_target:CmtTargetMarauderRallyPoint
						clear_auto_move_on_arrival = no
					}
				} else = {
					if = { limit = { exists = leader }
						leader = {
							kill_leader = { show_notification = no }
						}
					}
					delete_fleet = { target = this destroy_template = yes }
				}
			}
			remove_country_flag = CmtFlagHiringMarauder2
			break = yes
		}
		# Marauder 3
		else_if = {
			limit = {
				has_country_flag = CmtFlagHiringMarauder3
				# from = { has_country_flag = marauder_3 } not always exists
			}
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet3 = yes }
				if = { limit = { exists = from exists = event_target:CmtTargetMarauderRallyPoint }
					set_owner = from
					if = { limit = { exists = leader }
						leader = {
							remove_leader_flag = marauder_merc_leader
							set_owner = from
						}
					}
					auto_move_to_planet = {
						target = event_target:CmtTargetMarauderRallyPoint
						clear_auto_move_on_arrival = no
					}

				} else = {
					if = { limit = { exists = leader }
						leader = {
							kill_leader = { show_notification = no }
						}
					}
					delete_fleet = { target = this destroy_template = yes }
				}
			}
			remove_country_flag = CmtFlagHiringMarauder3
		}
	}

	option = { name = marauder.76.a }
}

### Mercenaries Leave (join the Great Khan)
# Refund opportunity (by FirePrince)
# Scope = Recruiter
country_event = {
	id = marauder.77
	title = "marauder.77.name"
	desc = "marauder.77.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter

	is_triggered_only = yes

	immediate = {
		# Marauder 1
		set_variable = { which = merccost value = 0 }

		if = {
			limit = { has_country_flag = CmtFlagHiringMarauder1 }

			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet1 = yes }
				leader = {
					remove_leader_flag = marauder_merc_leader
					# kill_leader = { show_notification = no }
					set_owner = event_target:raider_khanate
				}
				switch = { # Refund of Mercenary
					trigger = has_fleet_flag
					armada_of_the_voidborn = { prev = { change_variable = { which = merccost value = @largemerccost } } }
					star_rider_flotilla = { prev = { change_variable = { which = merccost value = @mediummerccost } } }
					first_storm_wing = { prev = { change_variable = { which = merccost value = @smallmerccost } } }
				}
				# delete_fleet = { target = this destroy_template = yes }
				set_owner = event_target:raider_khanate
				fleet_event = { id = khan.611 days = -1 }
			}
			every_owned_leader = {
				limit = { has_leader_flag = hired_merc_leader_1 }
				# kill_leader = { show_notification = no }
				set_owner = event_target:raider_khanate
			}
			remove_country_flag = CmtFlagHiringMarauder1
			if = { # All Marauders unified
				limit = {
					event_target:CmtGlobalVar = {
						check_variable = { which = CmtVarKhanMultiple value < 5 }
					}
				}
				break = yes
			}
		}
		# Marauder 2
		if = { limit = { has_country_flag = CmtFlagHiringMarauder2 }
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet2 = yes }
				leader = {
					remove_leader_flag = marauder_merc_leader
					# kill_leader = { show_notification = no }
					set_owner = event_target:raider_khanate
				}
				switch = { # Refund of Mercenary
					trigger = has_fleet_flag
					dwamak_bashers				= { prev = { change_variable = { which = merccost value = @largemerccost } } }
					unhinged_screamer_flotilla	= { prev = { change_variable = { which = merccost value = @mediummerccost } } }
					frenzied_volunteer_squadron	= { prev = { change_variable = { which = merccost value = @smallmerccost } } }
				}
				# delete_fleet = { target = this destroy_template = yes }
				set_owner = event_target:raider_khanate
				fleet_event = { id = khan.611 days = -1 }
			}
			every_owned_leader = {
				limit = { has_leader_flag = hired_merc_leader_2 }
				# kill_leader = { show_notification = no }
				set_owner = event_target:raider_khanate
			}
			remove_country_flag = CmtFlagHiringMarauder2
			if = { # All Marauders unified
				limit = {
					event_target:CmtGlobalVar = {
						check_variable = { which = CmtVarKhanMultiple value < 5 }
					}
				}
				break = yes
			}
		}
		# Marauder 3
		if = { limit = { has_country_flag = CmtFlagHiringMarauder3 }
			every_controlled_fleet = {
				limit = { CmtTriggerHiredMarauderFleet3 = yes }
				leader = {
					remove_leader_flag = marauder_merc_leader
					# kill_leader = { show_notification = no }
					set_owner = event_target:raider_khanate
				}
				switch = { # Refund of Mercenary
					trigger = has_fleet_flag
					her_chosen_champions = { prev = { change_variable = { which = merccost value = @largemerccost } } }
					order_of_eternal_night = { prev = { change_variable = { which = merccost value = @mediummerccost } } }
					twilight_congregation = { prev = { change_variable = { which = merccost value = @smallmerccost } } }
				}
				# delete_fleet = { target = this destroy_template = yes }
				set_owner = event_target:raider_khanate
				fleet_event = { id = khan.611 days = -1 }
			}
			every_owned_leader = {
				limit = { has_leader_flag = hired_merc_leader_3 }
				# kill_leader = { show_notification = no }
				set_owner = event_target:raider_khanate
			}
			remove_country_flag = CmtFlagHiringMarauder3
		}
	}
	after = {
		# Refund of Mercenary Pay 1/2
		random = {
			chance = 50
			divide_variable = { which = merccost value = 200 }
			add_resource = { energy = -100 mult = merccost }
		}
		hidden_effect = { clear_variable = merccost }
	}
	option = { name = marauder.76.a }
}

#######################
###- Reinforcements -###
#######################

### Mercenaries Join Great Khan (HIDDEN)
country_event = {
	id = marauder.78
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				OR = {
					NOT = { has_global_flag = great_khan_wins }
					AND = {
						num_marauder_empires_to_spawn > 2
						exists = event_target:CmtTargetMarauderRallyPoint1
						exists = event_target:CmtTargetMarauderRallyPoint2
						exists = event_target:CmtTargetMarauderRallyPoint3
					}
					AND = {
						num_marauder_empires_to_spawn > 1
						exists = event_target:CmtTargetMarauderRallyPoint1
						exists = event_target:CmtTargetMarauderRallyPoint2
					}
					AND = {
						num_marauder_empires_to_spawn > 0
						exists = event_target:CmtTargetMarauderRallyPoint1
					}
				}
			}
			every_planet_within_border = {
				limit = { has_planet_flag = CmtFlagMarauderExpRallyPoint }
				if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint1 is_same_value = event_target:CmtTargetMarauderRallyPoint1 }
					CmtEffectCreateAdmiralty_KhanMercenaries1 = yes
				} else_if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint2 is_same_value = event_target:CmtTargetMarauderRallyPoint2 }
					CmtEffectCreateAdmiralty_KhanMercenaries2 = yes
				} else_if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint3 is_same_value = event_target:CmtTargetMarauderRallyPoint3 }
					CmtEffectCreateAdmiralty_KhanMercenaries3 = yes
				}
			}
		} else = {
			switch = {
				trigger = has_country_flag
				marauder_1 = { event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanMercenaries1 = yes } }
				marauder_2 = { event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanMercenaries2 = yes } }
				marauder_3 = { event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanMercenaries3 = yes } }
			}
		}
	}
	# option = { # Refuse
	# 	name = marauder.102.e
	# 	default_hide_option = yes
	# }
}

# Raiders Hit Planet (HIDDEN)
# Vanilla Fixes: Fleets getting stuck (due FTL Inhibitors and planet owner change)
# From = Bombarder
planet_event = {
	id = marauder.103
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = {
		has_owner = yes
		has_ground_combat = no
	}
	trigger = {
		planet_devastation > 15
		from = { is_country_type = marauder_raiders }
		exists = owner
		owner = { merg_is_standard_empire = yes }
		NOT = { has_planet_flag = planet_raided }
	}
	immediate = {

		from = {
			random_owned_fleet = {
				limit = {
					has_fleet_flag = raiding_fleet
					root = { any_fleet_in_orbit = { is_same_value = prevprev } }
				}
				save_event_target_as = raiding_fleet
				# log="Save Marauder Raid Fleet on \\[Root.GetName]"
			}
		}

		random_country = {
			limit = {
				is_country_type = dormant_marauders
				has_country_flag = parent_of@from
			}
			save_event_target_as = marauder_country
			# log="Save Marauder Country on \\[Root.GetName]"
		}

		### Check Target valid (Vanilla Fix)
		if = {
			limit = {
				OR = {
					owner = { NOT = { has_country_flag = under_marauder_attack } }
					# owner = { NOT = { is_hostile = from } }
					# owner = { has_relation_flag = { who = event_target:marauder_country flag = hired_fleet } }
					AND = {
						is_occupied_flag = yes
						exists = controller
						NOT = { is_controlled_by = owner }
						controller = {
							merg_is_standard_empire = yes
							NOT = { has_country_flag = under_marauder_attack }
							# OR = {
							# 	has_relation_flag = { who = event_target:marauder_country flag = hired_fleet }
							# 	NOT = { is_hostile = from }
							# }
						}
					}
				}
			}
			# log="Invalid Marauder Raid Target \\[This.GetName]"

			## Break Attack immediately
			event_target:raiding_fleet = {
				remove_auto_move_target = yes
				clear_orders = yes
				clear_fleet_actions = this
				every_owned_ship = { set_disabled = yes }
				set_event_locked = yes
			}

			## Refresh Agreement
			if = {
				limit = {
					owner = {
						# from = { is_hostile = prev }
						is_hostile = from
						has_relation_flag = { who = event_target:marauder_country flag = hired_fleet }
					}
				}
				owner = { save_event_target_as = marauder_employer }
			} else_if = {
				limit = {
					is_occupied_flag = yes
					exists = controller
					NOT = { is_controlled_by = owner }
					controller = {
						merg_is_standard_empire = yes
						OR = {
							has_relation_flag = { who = event_target:marauder_country flag = hired_fleet }
							is_friendly_to = from
						}
					}
				}
				controller = { save_event_target_as = marauder_employer }
			}
			# Set friendly
			if = {
				limit = {
					exists = event_target:marauder_employer
					from = { is_hostile = event_target:marauder_employer }
					has_global_flag = gf_great_khan_active
				}
				from = {
					country_event = { id = khan.308 scopes = { from = event_target:marauder_employer } }
				}
			}

			### Search New Target
			if = {
				limit = {
					OR = {
						owner = {
							NOR = {
								has_country_flag = under_marauder_attack
								has_country_flag = raid_target_of@event_target:marauder_country
								has_relation_flag = { who = event_target:marauder_country flag = current_hired_target }
							}
						}
						AND = {
							is_occupied_flag = yes
							exists = controller
							NOT = { is_controlled_by = owner }
							controller = {
								merg_is_standard_empire = yes
								NOT = { has_country_flag = under_marauder_attack }
								OR = {
									is_friendly_to = from
									is_neutral_to = from
								}
							}
						}
					}
				}
				# log="Save New Marauder Raid Target Victim"
				random_country = {
					limit = {
						merg_is_standard_empire = yes
						has_country_flag = under_marauder_attack
						has_country_flag = raid_target_of@event_target:marauder_country
						has_relation_flag = { who = event_target:marauder_country flag = current_hired_target }
					}
					save_event_target_as = raid_victim
				}
			} else_if = {
				limit = {
					is_occupied_flag = no
					NOT = { exists = event_target:raid_victim }
					OR = {
						NOT = { exists = event_target:marauder_employer }
						owner = {
							NOT = { is_same_empire = event_target:marauder_employer }
							has_country_flag = under_marauder_attack
						}
					}
				}
				# log="Save fallback Marauder1 Raid Target Victim"
				owner = { save_event_target_as = raid_victim }
			}
			if = { # Raid anyway
				limit = {
					is_occupied_flag = yes
					NOT = { exists = event_target:raid_victim }
					owner = {
						NOT = { has_country_flag = under_marauder_attack }
						OR = {
							is_friendly_to = from
							is_neutral_to = from
						}
					}
					OR = {
						NOT = { exists = event_target:marauder_employer }
						controller = {
							has_country_flag = under_marauder_attack
							NOT = { is_same_empire = event_target:marauder_employer }
						}
					}
				}
				# log="Save fallback Marauder2 Raid Target Victim"
				controller = { save_event_target_as = raid_victim }
				# Free planet
				if = { limit = { num_armies < 1 }
					set_controller = owner
					if = {
						limit = {
							solar_system = { exists = starbase }
							solar_system.starbase = { is_owned_by = root.controller }
						}
						solar_system.starbase = { set_owner = root.owner }
					}
				}
			}

			if = {
				limit = {
					exists = event_target:raid_victim
					exists = event_target:raiding_fleet
				}
				# log="Search New Marauder Raid Target Planet"
				solar_system = {
					closest_system = {
						limit = {
							any_system_colony = {
								has_owner = yes
								is_owned_by = event_target:raid_victim
								is_occupied_flag = no
								NOT = { has_planet_flag = planet_raided }
								num_pops > 1
							}
							# event_target:raiding_fleet = { can_access_system = prev }
						}
						random_system_colony = {
							limit = {
								is_owned_by = event_target:raid_victim
								is_colony = yes
								is_occupied_flag = no
								NOT = { has_planet_flag = planet_raided }
								num_pops > 1
							}
							save_event_target_as = raid_planet
						}
						event_target:raiding_fleet = {
							# log="Found New Marauder Raid Target: \\[raid_planet.GetName]"
							set_event_locked = no
							# queue_actions = { wait = 2 }
							if = {
								limit = {
									exists = event_target:raid_planet
									can_access_system = event_target:raid_planet.solar_system
								}
								auto_move_to_planet = {
									target = event_target:raid_planet
									clear_auto_move_on_arrival = no
								}
							} else = {
								fleet_event = { id = marauder.29 scopes = { from = event_target:raid_victim } }
							}
						}
					}
				}
				# Nothing found, return home
				if = {
					limit = {
						exists = event_target:raiding_fleet
						NOT = { exists = event_target:raid_planet }
					}
					# log="No new Marauder Raid Target found, return home"
					event_target:raiding_fleet = {
						set_event_locked = no
						fleet_event = { id = marauder.110 days = 7 scopes = { from = event_target:raid_victim } }
					}
				}
				set_timed_planet_flag = { flag = planet_raided days = 9 }
				break = yes				# Target not valid anymore
			}
		}

		set_timed_planet_flag = { flag = planet_raided months = 20 }
		event_target:raiding_fleet = { # Return home
			set_event_locked = no
			fleet_event = { id = marauder.110 days = 20 scopes = { from = event_target:raid_victim } }
		}

		owner = { save_event_target_as = raid_victim }

		if = { limit = { owner = { is_gestalt = no } }
			random_list = {
				50 = { planet_event = { id = marauder.104 } }
				50 = { planet_event = { id = marauder.105 } }
			}
		} else_if = {
			limit = {
				owner = {
					is_machine_empire = yes
					NOT = { has_valid_civic = civic_machine_servitor }
				}
			}
			planet_event = { id = marauder.106 }
		} else_if = { limit = { owner = { has_valid_civic = civic_machine_servitor } }
			planet_event = { id = marauder.107 }
		} else_if = { limit = { owner = { is_hive_empire = yes } }
			planet_event = { id = marauder.108 }
		}
	}
}

# Raiders Hit Planet (Slaves)
planet_event = {
	id = marauder.105
	title = "marauder.104.name"
	desc = "marauder.105.desc"
	picture = GFX_evt_surrender
	show_sound = event_planetary_riot
	location = root
	is_triggered_only = yes
	pre_triggers = { has_owner = yes }
	trigger = {
		is_colony = yes
		exists = owner
	}
	immediate = {
		if = { limit = { NOT = { exists = event_target:marauder_country } }
			random_country = {
				limit = {
					is_country_type = dormant_marauders
					has_country_flag = parent_of@fromfrom
				}
				save_event_target_as = marauder_country
			}
		}
		if = {
			limit = {
				num_species > 1
				NOT = { exists = event_target:marauder_species }
			}
			if = { limit = { exists = event_target:marauder_country }
				event_target:marauder_country.owner_species = { save_event_target_as = marauder_species }
			} else_if = { limit = { exists = fromfrom exists = fromfrom.species }
				fromfrom.species = { save_event_target_as = marauder_species }
			}
			# log="Marauder From.species exists \\[marauder_species.GetName]"
		} # else = { log="No Marauder Species fromfrom \\[fromfrom.GetName]" }

		owner = {
			set_variable = { which = destruction_amount value = 3 }
			if = { limit = { exists = event_target:marauder_country }
				switch = {
					trigger = has_country_flag
					marauder_tribute_1@event_target:marauder_country = { set_variable = { which = destruction_amount value = 1 } }
					marauder_tribute_2@event_target:marauder_country = { set_variable = { which = destruction_amount value = 2 } }
					marauder_tribute_3@event_target:marauder_country = { set_variable = { which = destruction_amount value = 3 } }
					marauder_tribute_4@event_target:marauder_country = { set_variable = { which = destruction_amount value = 4 } }
					marauder_tribute_5@event_target:marauder_country = { set_variable = { which = destruction_amount value = 5 } }
					marauder_tribute_6@event_target:marauder_country = { set_variable = { which = destruction_amount value = 6 } }
					# default = { set_variable = { which = destruction_amount value = 3 } }
				}
			}
		}
		while = {
			count = owner.destruction_amount
			limit = { num_pops > 1 }
			random_owned_pop = {
				limit = {
					is_robot_pop = no
					is_sapient = yes
				}
				weights = {
					base = 3
					modifier = { add = 2 OR = { is_pop_category = slave is_pop_category = purge } }
					modifier = { add = 2 is_unemployed = yes }
					modifier = { add = 3 exists = event_target:marauder_species NOT = { is_same_species = event_target:marauder_species } }
					modifier = { add = 1 NOT = { ideal_planet_class = prev } }
					# modifier = { add = 1 prev = { count_owned_pop = { limit = { is_same_species = prevprev } count > 5 } } }
					# modifier = { add = 2 species_can_be_necrophaged = no }
				}
				# unemploy_pop = yes
				kill_pop = yes
			}
		}
	}
	option = { name = marauder.105.a }
	after = {
		hidden_effect = {
			owner = { clear_variable = destruction_amount }
		}
	}
}

# Raiders Hit Planet (Servitor Machines)
planet_event = {
	id = marauder.107
	title = "marauder.104.name"
	desc = "marauder.107.desc"
	picture = GFX_evt_burning_settlement
	show_sound = event_planetary_riot
	location = root
	is_triggered_only = yes
	immediate = {
		if = { limit = { NOT = { exists = event_target:marauder_country } }
			random_country = {
				limit = {
					is_country_type = dormant_marauders
					has_country_flag = parent_of@fromfrom
				}
				save_event_target_as = marauder_country
			}
		}
		owner = {
			set_variable = { which = destruction_amount value = 5 }
			if = { limit = { exists = event_target:marauder_country }
				switch = {
					trigger = has_country_flag
					marauder_tribute_1@event_target:marauder_country = { set_variable = { which = destruction_amount value = 3 } }
					marauder_tribute_2@event_target:marauder_country = { set_variable = { which = destruction_amount value = 4 } }
					marauder_tribute_3@event_target:marauder_country = { set_variable = { which = destruction_amount value = 5 } }
					marauder_tribute_4@event_target:marauder_country = { set_variable = { which = destruction_amount value = 6 } }
					marauder_tribute_5@event_target:marauder_country = { set_variable = { which = destruction_amount value = 7 } }
					marauder_tribute_6@event_target:marauder_country = { set_variable = { which = destruction_amount value = 8 } }
					# default = { set_variable = { which = destruction_amount value = 5 } }
				}
			}
		}
	}
	option = {
		name = marauder.107.a
		while = {
			count = owner.destruction_amount
			limit = { num_pops > 1 }
			random_owned_pop = {
				limit = {
					is_robot_pop = no
					is_sapient = yes
				}
				weights = {
					base = 3
					modifier = { add = 1 OR = { is_pop_category = slave is_pop_category = purge } }
					modifier = { add = 1 is_unemployed = yes }
					# modifier = { add = -2 is_same_species = fromfrom }
				}
				# unemploy_pop = yes
				kill_pop = yes
			}
		}
	}
	after = { hidden_effect = { owner = { clear_variable = destruction_amount } } }
}

# AI hires Raiders (on_monthly_pulse)
# Vanilla fix omit Marauders getting stuck (by FirePrince)
event = {
	id = marauder.150
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		years_passed >= 50
		any_playable_country = {
			is_ai = yes
			is_homicidal = no
			any_rival_country = {
				NOR = {
					has_country_flag = under_marauder_attack
					has_country_flag = target_of_hired_ai_raid
				}
			}
			resource_stockpile_compare = { resource = energy value >= 5000 }
			any_relation = {
				is_country_type = dormant_marauders
				has_communications = prev
				NOR = {
					has_country_flag = raid_ongoing
					has_country_flag = raid_cooldown
				}
			}
		}
	}
	immediate = {
		# Define hired_marauders for use in weights.
		random_playable_country = {
			limit = {
				is_ai = yes
				is_homicidal = no
				any_rival_country = {
					NOR = {
						has_country_flag = under_marauder_attack
						has_country_flag = target_of_hired_ai_raid
					}
				}
				resource_stockpile_compare = { resource = energy value >= 5000 }
				any_relation = {
					is_country_type = dormant_marauders
					has_communications = prev
					NOR = {
						has_country_flag = raid_ongoing
						has_country_flag = raid_cooldown
					}
				}
			}
			save_event_target_as = hired_marauders
		}
		random_list = {
			3 = {
				modifier = {
					factor = 0
					event_target:hired_marauders = {
						OR = {
							has_ai_personality = honorbound_warriors
							has_ai_personality = xenophobic_isolationists
						}
					}
				}
				modifier = {
					factor = 0.6
					event_target:hired_marauders = { has_ai_personality = peaceful_traders }
				}
				# Moved out of random_list
				# random_playable_country = {
				#	limit = {
				#		is_ai = yes
				#		NOR = {
				#			has_valid_civic = civic_fanatic_purifiers
				#			has_valid_civic = civic_hive_devouring_swarm
				#			has_valid_civic = civic_machine_terminator
				#		}
				#		any_relation = {
				#			prev = { is_rival = prev }
				#		}
				#		resource_stockpile_compare = { resource = energy value >= 5000 }
				#	}
				#	save_event_target_as = hired_marauders
				event_target:hired_marauders = {
					# add_resource = { energy = @raidcost } later per var
					random_rival_country = {
						limit = {
							NOR = {
								has_country_flag = under_marauder_attack
								has_country_flag = target_of_hired_ai_raid
							}
						}
						save_event_target_as = marauder_target
						set_timed_country_flag = { flag = target_of_hired_ai_raid years = 20 }
					}
					random_relation = {
						limit = {
							is_country_type = dormant_marauders
							NOR = {
								has_country_flag = raid_ongoing
								has_country_flag = raid_cooldown
							}
						}
						save_event_target_as = raiding_marauder
					}
				}
				event_target:raiding_marauder = {
					get_marauder_raid_source = yes
					set_country_flag = raid_ongoing
					get_marauder_species = yes
				}
				create_country = {
					name = event_target:raiding_marauder
					type = marauder_raiders
					species = event_target:marauder_species
					flag = event_target:raiding_marauder
					effect = {
						save_event_target_as = marauder_raiding_country
						event_target:raiding_marauder = {
							switch = {
								trigger = has_country_flag
								marauder_1 = { prev = { set_country_flag = marauder_1 } }
								marauder_2 = { prev = { set_country_flag = marauder_2 } }
								marauder_3 = { prev = { set_country_flag = marauder_3 } }
							}
						}
						set_country_flag = raid_ongoing
						make_moderately_hostile = yes
					}
				}
				event_target:marauder_raiding_country = {
					every_country = { limit = { has_communications = event_target:raiding_marauder } establish_communications_no_message = prev }
					event_target:raiding_marauder = {
						set_country_flag = parent_of@event_target:marauder_raiding_country
						set_faction_hostility = {
							target = event_target:marauder_raiding_country
							set_hostile = no
							set_neutral = no
							set_friendly = yes
						}
						## Dynamic raid costs TODO needs update each effect.
						if = { limit = { has_global_flag = pirate_waves_active }
							set_pirates_difficulty = yes
							set_variable = { which = raidcost value = 1.5 }
							change_variable = { which = raidcost value = pirates_factor }
							divide_variable = { which = raidcost value = 2 } # Take only 50% weight
							multiply_variable = { which = raidcost value = pirates_factor } # As it is only half for marauders.
							switch = { # Price depending on difficulty?
								trigger = has_country_flag
								pirate_waves_very_easy = {
									multiply_variable = { which = raidcost value = 0.5 }
								}
								pirate_waves_easy = {
									multiply_variable = { which = raidcost value = 0.75 }
								}
								ships_count_hard = {
									multiply_variable = { which = raidcost value = 1.25 }
								}
								pirate_waves_insane = {
									multiply_variable = { which = raidcost value = 1.5 }
								}
							}
							round_variable_to_closest = { which = raidcost value = 0.01 }
							# round_variable = raidcost
						} else = {
							set_variable = { which = raidcost value = 1 }
						}
					}
					create_leader = {
						class = admiral
						species = event_target:marauder_species
						name = random
						skill = 3
						leader_age_min = 25
						leader_age_max = 45
						traits = {
							trait = random_trait
							trait = leader_trait_mercenary_warrior
							trait = random_trait
						}
					}
					create_fleet = {
						name = "NAME_Raiding_Fleet"
						effect = {
							set_owner = event_target:raiding_marauder							# For ship names
							create_marauder_raiders = yes
							set_location = event_target:raid_source
							set_fleet_stance = aggressive
							set_fleet_bombardment_stance = indiscriminate
							set_aggro_range_measure_from = self
							set_aggro_range = 150
							set_fleet_flag = hired_raiding_fleet
							set_fleet_flag = raiding_fleet
						}
					}
					set_faction_hostility = {
						target = event_target:marauder_target
						set_hostile = yes
						set_neutral = no
						set_friendly = no
					}
					last_created_fleet = {
						set_owner = prev	# Real owner
						assign_leader = last_created_leader # FIXME sometimes fail!?
						closest_system = {
							use_bypasses = yes
							limit = {
								has_owner = yes
								is_owned_by = event_target:marauder_target
								any_system_colony = {
									is_owned_by = event_target:marauder_target
									num_pops > 0
								}
								# prev = { can_access_system = prev }
							}
							random_system_colony = {
								limit = {
									is_owned_by = event_target:marauder_target
									num_pops > 0
								}
								save_event_target_as = raid_planet
							}
						}
						if = {
							limit = {
								exists = event_target:raid_planet
								can_access_system = event_target:raid_planet.solar_system
							}
							auto_move_to_planet = { target = event_target:raid_planet clear_auto_move_on_arrival = no }
						} else = {
							fleet_event = { id = marauder.29 scopes = { from = event_target:marauder_target } }
						}
					}
					event_target:raiding_marauder = {
						event_target:hired_marauders = {
							add_resource = { energy = @raidcost mult = prev.raidcost }
						}
						log="raidcost \\[This.raidcost]"
						clear_variable = raidcost
					}
				}
				event_target:marauder_target = {
					set_country_flag = raid_target_of@event_target:raiding_marauder
					set_country_flag = under_marauder_attack
					set_relation_flag = { who = event_target:raiding_marauder flag = current_hired_target }
					if = { limit = { has_communications = event_target:raiding_marauder }
						country_event = { id = marauder.120 days = 1 random = 30 }
					} else = {
						country_event = { id = marauder.123 days = 1 random = 30 }
					}
				}
			}
			110 = { }
		}
	}
}

# (The Great Khan Expanded)
# Helper event only - Create global Rally Point event_targets.
country_event = {
	id = marauder.499
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		### Rally Point of Fleets 1/3: Set Event Targets; Set Owner Species to Target
		if = { limit = { exists = event_target:marauder_country_1 }
			event_target:marauder_country_1 = {
				if = { limit = { any_system_within_border = { has_star_flag = marauder_capital_1 } }
					random_system_within_border = {
						limit = { has_star_flag = marauder_capital_1 }
						if = { limit = { any_system_planet = { has_planet_flag = raid_source } }
							random_system_planet = {
								limit = { has_planet_flag = raid_source }
								save_global_event_target_as = CmtTargetMarauderRallyPoint1
							}
						} else = {	## Backup Code: raid_source NOT Found in Capital System
							random_system_planet = {
								limit = { is_star = no }
								weights = {
									base = 1
									modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
									modifier = { add = 2 is_colony = yes }
									modifier = { add = 1 is_colonizable = yes }
								}
								save_global_event_target_as = CmtTargetMarauderRallyPoint1
							}
							log = "Backup Code for CmtTargetMarauderRallyPoint1 - 1 Processed"
						}
					}
				} else = {	## Backup Code: Capital System NOT Found
					random_planet_within_border = {
						limit = { is_star = no }
						weights = {
							base = 1
							# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
							modifier = { add = 3 has_planet_flag = raid_source }
							modifier = { add = 2 is_colony = yes }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_global_event_target_as = CmtTargetMarauderRallyPoint1
					}
					log = "Backup Code for CmtTargetMarauderRallyPoint1 - 2 Processed"
					# Recover former capital
					if = {
						limit = {
							any_system_within_border = {
								any_neighbor_system = {
									has_owner = no
									has_star_flag = marauder_capital_1
								}
							}
						}
						random_system_within_border = {
							random_neighbor_system = {
								limit = {
									has_owner = no
									has_star_flag = marauder_capital_1
								}
								prevprev = { save_event_target_as = marauder_starbase_owner }
								create_marauder_starbase = yes
							}
						}
					}
				}
			}
		}
		if = { limit = { exists = event_target:marauder_country_2 }
			event_target:marauder_country_2 = {
				# owner_species = { save_global_event_target_as = CmtTargetSpecies_Marauder2 }
				if = { limit = { any_system_within_border = { has_star_flag = marauder_capital_2 } }
					random_system_within_border = {
						limit = { has_star_flag = marauder_capital_2 }
						if = { limit = { any_system_planet = { has_planet_flag = raid_source } }
							random_system_planet = {
								limit = { has_planet_flag = raid_source }
								save_global_event_target_as = CmtTargetMarauderRallyPoint2
							}
						} else = {	## Backup Code: raid_source NOT found in Capital System
							random_system_planet = {
								limit = { is_star = no }
								weights = {
									base = 1
									modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
									modifier = { add = 2 is_colony = yes }
									modifier = { add = 1 is_colonizable = yes }
								}
								save_global_event_target_as = CmtTargetMarauderRallyPoint2
							}
							log = "Backup Code for CmtTargetMarauderRallyPoint2 - 1 Processed"
						}
					}
				} else = {
					## Backup Code: Capital System NOT Found
					random_planet_within_border = {
						limit = { is_star = no }
						weights = {
							base = 1
							# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
							modifier = { add = 3 has_planet_flag = raid_source }
							modifier = { add = 2 is_colony = yes }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_global_event_target_as = CmtTargetMarauderRallyPoint2
					}
					log = "Backup Code for CmtTargetMarauderRallyPoint2 - 2 Processed"
					# Recover former capital
					if = {
						limit = {
							any_system_within_border = {
								any_neighbor_system = {
									has_owner = no
									has_star_flag = marauder_capital_2
								}
							}
						}
						random_system_within_border = {
							random_neighbor_system = {
								limit = {
									has_owner = no
									has_star_flag = marauder_capital_2
								}
								prevprev = { save_event_target_as = marauder_starbase_owner }
								create_marauder_starbase = yes
							}
						}
					}
				}
			}
		}
		if = { limit = { exists = event_target:marauder_country_3 }
			event_target:marauder_country_3 = {
				# owner_species = { save_global_event_target_as = CmtTargetSpecies_Marauder3 }
				if = { limit = { any_system_within_border = { has_star_flag = marauder_capital_3 } }
					random_system_within_border = {
						limit = { has_star_flag = marauder_capital_3 }
						if = { limit = { any_system_planet = { has_planet_flag = raid_source } }
							random_system_planet = {
								limit = { has_planet_flag = raid_source }
								save_global_event_target_as = CmtTargetMarauderRallyPoint3
							}
						} else = {	## Backup Code: raid_source NOT Found in Capital System
							random_system_planet = {
								limit = { is_star = no }
								weights = {
									base = 1
									modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
									modifier = { add = 2 is_colony = yes }
									modifier = { add = 1 is_colonizable = yes }
								}
								save_global_event_target_as = CmtTargetMarauderRallyPoint3
							}
							log = "Backup Code for CmtTargetMarauderRallyPoint3 - 1 Processed"
						}
					}
				} else = {	## Backup Code: Capital System NOT Found
					random_planet_within_border = {
						limit = { is_star = no }
						weights = {
							base = 1
							# modifier = { add = 1 is_a_planet = yes } # possible inconsisent due other mods
							modifier = { add = 3 has_planet_flag = raid_source }
							modifier = { add = 2 is_colony = yes }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_global_event_target_as = CmtTargetMarauderRallyPoint3
					}
					log = "Backup Code for CmtTargetMarauderRallyPoint3 - 2 Processed"
					# Recover former capital
					if = {
						limit = {
							any_system_within_border = {
								any_neighbor_system = {
									has_owner = no
									has_star_flag = marauder_capital_3
								}
							}
						}
						random_system_within_border = {
							random_neighbor_system = {
								limit = {
									has_owner = no
									has_star_flag = marauder_capital_3
								}
								prevprev = { save_event_target_as = marauder_starbase_owner }
								create_marauder_starbase = yes
							}
						}
					}
				}
			}
		}
	}
}

#####################################
### Main Effect of Khan Awakening ###
#####################################

### CRISIS BEGINS (MTTH 1 year)
country_event = {
	id = marauder.500
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		# OR = {
		# 	num_marauder_empires_to_spawn > 0
		# 	event_target:global_event_country = { has_country_flag = outer_bulwark_inactive }
		# }
		# is_crises_allowed = yes
		NOR = {
			has_global_flag = great_khan_wins
			has_global_flag = war_in_heaven_started
			any_country = { is_country_type = awakened_marauders } # CmtTriggerNowInKhanCrisis
		}
		CmtTriggerHasPotentialKhanAwaking = yes
		crisis_happened_and_defeated = no
	}
	# trigger = {
	# 	OR = {
	# 		AND = {
	# 			mid_game_years_passed > 1
	# 			end_game_years_passed < 0
	# 		}
	# 		has_global_flag = horde_triggered
	# 	}
	# 	is_country_type = dormant_marauders
	# 	NOT = { has_global_flag = marauder_crisis_started }
	# 	OR = {
	# 		AND = {
	# 			has_country_flag = marauder_1
	# 			any_system_within_border = { has_star_flag = marauder_capital_1 }
	# 		}
	# 		AND = {
	# 			has_country_flag = marauder_2
	# 			any_system_within_border = { has_star_flag = marauder_capital_2 }
	# 		}
	# 		AND = {
	# 			has_country_flag = marauder_3
	# 			any_system_within_border = { has_star_flag = marauder_capital_3 }
	# 		}
	# 	}
	# }
	immediate = {
		if = {
			limit = {
				OR = {
					exists = event_target:raider_khanate
					has_global_flag = marauder_crisis_started
				}
			}
			clear_global_event_target = raider_khanate
			every_playable_country = {
				limit = { has_country_flag = rebelling_satrapy }
				remove_country_flag = rebelling_satrapy
			}
		}
		if = { limit = { has_country_flag = marauder600_happened }
			remove_country_flag = marauder600_happened
		}
		if = { limit = { has_country_flag = khan_dead_event_fine }
			remove_country_flag = khan_dead_event_fine
		}
		if = { limit = { has_country_flag = great_khan_defeated_once }
			remove_country_flag = great_khan_defeated_once
		}
		if = { limit = { has_global_flag = great_khan_dead }
			remove_global_flag = great_khan_dead
			remove_global_flag = great_khan_announcement
		}
		if = { limit = { exists = event_target:marauder_rally_point }
			clear_global_event_target = marauder_rally_point
		}
		set_global_flag = marauder_crisis_started
		set_global_flag = marauder_crisis_ongoing
		save_global_event_target_as = raider_khanate

		if = { limit = { NOT = { exists = event_target:marauder_country_1 } }
			random_country = { limit = { has_country_flag = marauder_1 }
				save_global_event_target_as = marauder_country_1
			}
		}
		if = { limit = { num_marauder_empires_to_spawn > 1 NOT = { exists = event_target:marauder_country_2 } }
			random_country = {
				limit = { has_country_flag = marauder_2 }
				save_global_event_target_as = marauder_country_2
			}
		}
		if = { limit = { num_marauder_empires_to_spawn > 2 NOT = { exists = event_target:marauder_country_3 } }
			random_country = {
				limit = { has_country_flag = marauder_3 }
				save_global_event_target_as = marauder_country_3
			}
		}
		# Create global Rally Point event_targets.
		country_event = { id = marauder.499 days = -1 } # TODO may effect?
		### Rally Point of Fleets 2/3: Set Event Targets, Flags
		if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
			event_target:CmtTargetMarauderRallyPoint1 = {
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				if = {
					limit = {
						has_owner = yes
						solar_system = { is_owned_by = root }
					}
					save_global_event_target_as = marauder_rally_point
					set_planet_flag = marauder_rally_point
				}
			}
		}
		if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
			event_target:CmtTargetMarauderRallyPoint2 = {
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				if = {
					limit = {
						has_owner = yes
						solar_system = { is_owned_by = root }
					}
					save_global_event_target_as = marauder_rally_point
					set_planet_flag = marauder_rally_point
				}
			}
		}
		if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
			event_target:CmtTargetMarauderRallyPoint3 = {
				set_planet_flag = CmtFlagMarauderExpRallyPoint
				if = {
					limit = {
						has_owner = yes
						solar_system = { is_owned_by = root }
					}
					save_global_event_target_as = marauder_rally_point
					set_planet_flag = marauder_rally_point
				}
			}
		}

		### Unify All Marauders if Great Khan.
		if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } } }
			save_event_target_as = new_khanate
			every_country = {
				limit = {
					is_country_type = dormant_marauders
					NOT = { is_same_empire = root }
				}
				every_owned_fleet = { set_owner = root }
				destroy_country = yes
			}
		}
		### Rally Point of Fleets 3/3: Backup Code
		if = { limit = { NOT = { exists = event_target:marauder_rally_point } }
			random_planet_within_border = {
				limit = { is_star = no }
				weights = { base = 1 modifier = { add = 2 is_a_planet = yes } } # possible inconsisent due other mods
				save_global_event_target_as = marauder_rally_point
				set_planet_flag = marauder_rally_point
				log = "Backup Code for marauder_rally_point Processed on \\[This.GetName] at \\[This.System.GetName]"
			}
		}

		### Modify Country
		change_country_flag = {
			icon = { category = "pirate" file = "flag_pirate_11.dds" }
			background = { category = "backgrounds" file = "00_solid.dds" }
			colors = { "red" "red" "null" "null" }
		}

		if = { limit = { is_militarist = no }
			# limit = { is_pacifist = yes }
			shift_ethic = "ethic_militarist"
			#shift_ethic = "ethic_fanatic_militarist"
		}
		if = { limit = { has_ethic = "ethic_xenophobe" }
			country_remove_ethic = "ethic_xenophobe"
		}
		if = { limit = { is_spiritualist = no }
			shift_ethic = "ethic_spiritualist"
		}
		if = { limit = { is_egalitarian = yes }
			# shift_ethic = ethic_fanatic_spiritualist
			shift_ethic = ethic_authoritarian
		}

		if = { ### NSC SUPPORT
			limit = {
				is_ai = no
				host_has_dlc = Apocalypse
				has_global_flag = has_nsc_active
			}
			if = {
				limit = {
					NOT = {
						# merg_is_default_empire = yes
						any_playable_country = { is_same_empire = root }
					}
				}
				set_country_type = default
			}
			set_origin = "origin_nsc_freebooter"
			change_government = {
				authority = auth_dictatorial
				cooldown = no
				remove_invalid_civics = yes
			}
			if = { limit = { has_authority = auth_corporate }
				force_add_civic = nsc_freebooter_civic_freebooter_trait_change_corp
			} else = { force_add_civic = nsc_freebooter_civic_freebooter_trait_change }
			# force_add_civic = nsc_freebooter_civic_great_khans_vision later
		} else = {
			set_country_type = awakened_marauders
			change_government = {
				authority = auth_dictatorial
				civics = {
					civic = civic_great_khans_vision
					civic = civic_shared_burden
				}
				cooldown = no
				remove_invalid_civics = yes
			}
			# force_add_civic = civic_warrior_culture
			# force_add_civic = civic_slaver_guilds
			force_add_civic = civic_barbaric_despoilers
			force_add_civic = civic_fanatic_purifiers
		}

		add_resource = {
			energy	=	20000
			alloys	=	12000
			minerals =	8000
			unity	=	200000
		}

		set_ai_personality = hegemonic_imperialists

		create_ship_design = { design = "NAME_Pirate_Transport" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Clan_Builder" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Outrider" }
		add_ship_design = last_created_design
		if = { # If not dormant origin
			limit = { NOT = { has_existing_ship_design = starbase_marauder } }
			create_ship_design = { design = "NAME_Marauder_Starbase" }
			add_ship_design = last_created_design
		}
		if = { limit = { NOT = { has_tradition = tr_harmony_adopt } }
			add_tradition = tr_harmony_adopt
			add_tradition = tr_harmony_the_greater_good
			add_tradition = tr_harmony_mind_and_body
			add_tradition = tr_harmony_kinship
			add_tradition = tr_harmony_utopian_dream
			add_tradition = tr_harmony_harmonious_directives
			add_tradition = tr_harmony_finish
		}

		### Ruler Khan
		create_leader = {
			class = ruler
			species = owner_main_species
			name = random
			skill = 10
			event_leader = yes
			leader_age_min = 21
			leader_age_max = 36
			traits = {
				trait = leader_trait_ruler_great_khan
				# trait = leader_trait_ruler_chosen
				# trait = leader_trait_fleet_organizer
				# trait = leader_trait_eager
			}
		}

		if = { ## Compat. Khorgis Khan: Scourge of the Stars
			limit = { is_species_class = GC_CORGI }
			set_name = "NAME_KHORGI_KHAN"
			# room_name_override = "khorgis_khan_1_room" FIXME not working
			last_created_leader = { set_name = "NAME_Khorgis_Khan" }
		} else = {
			set_name = random
			# room_name_override = "ethic_spaceship_room" FIXME not working
		}
		assign_leader = last_created_leader

		if = { ### NSC SUPPORT
			limit = { has_global_flag = has_nsc_active }
			ruler = { add_ruler_trait = nsc_freebooter_leader_trait_ruler_great_khan }
		} else = {
			ruler = {
				add_ruler_trait = leader_trait_ruler_great_khan
				# add_ruler_trait = leader_trait_ruler_chosen
				# add_trait = leader_trait_eager
				add_skill = 2
			}
		}
		ruler = {
			if = { limit = { NOT = { has_trait = leader_trait_fleet_organizer } }
				add_trait = leader_trait_fleet_organizer
			}
			set_leader_flag = great_khan
			save_global_event_target_as = great_khan_ruler
			recruitable = no
		}

		### Lifespan, Remaining Live of Khan.
		if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_1a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_1a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_1c random = @CmtConstKhanLifespan_1d }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_2a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_2a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_2c random = @CmtConstKhanLifespan_2d }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_4a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_4a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_4c random = @CmtConstKhanLifespan_4d }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_5a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_5a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_5c random = @CmtConstKhanLifespan_5d }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
			set_global_flag = khan_no_die
			set_country_flag = CmtFlagKhanNoDieCountry
		} else = {
			set_timed_global_flag = { flag = khan_no_die days = @CmtConstKhanLifespan_3a }
			set_timed_country_flag = { flag = CmtFlagKhanNoDieCountry days = @CmtConstKhanLifespan_3a }
			country_event = { id = marauder.514 days = @CmtConstKhanLifespan_3c random = @CmtConstKhanLifespan_3d }
		}
		# Legacy CmtEffectTransferKhanRemainingLive = yes
		event_target:CmtGlobalVar = {
			if = { limit = { check_variable = { which = CmtVarKhanResurgence value < -0.5 } }
				root = { set_variable = { which = CmtVarKhanRemainingLive value = -1 } }
			} else = {
				root = { set_variable = { which = CmtVarKhanRemainingLive value = prev.CmtVarKhanResurgence } }
			}
		}
		# log="Set Admiral Khan"
		### Admiral Khan
		if = { limit = { is_ai = yes }
			clone_leader = {
				target = event_target:great_khan_ruler
				class = admiral
				skill = 10
				event_leader = yes
				traits = {
					trait = leader_trait_great_khan
					trait = leader_trait_admiral_chosen
					# trait = leader_trait_eager
				}
				# effect = {
				# 	set_leader_flag = great_khan
				# 	save_global_event_target_as = great_khan
				# 	recruitable = no
				# }
			}
		} else_if = { ### NSC SUPPORT
			limit = { has_global_flag = has_nsc_active }
			clone_leader = {
				target = ruler
				class = admiral
				traits = { trait = nsc_freebooter_admiral_trait_great_khan }
				skill = 7
			}
		} else = {
			clone_leader = {
				target = event_target:great_khan_ruler
				class = admiral
				skill = 6
				event_leader = yes
				traits = {
					trait = leader_trait_great_khan
					# trait = leader_trait_admiral_chosen
					trait = leader_trait_fleet_organizer
					# trait = leader_trait_eager
				}
				# effect = {
				# 	set_leader_flag = great_khan
				# 	save_global_event_target_as = great_khan
				# 	recruitable = no
				# }
			}
		}
		last_created_leader = {
			if = { limit = { NOT = { has_trait = leader_trait_fleet_logistician } }
				add_trait = leader_trait_fleet_logistician
			}
			set_leader_flag = great_khan
			save_global_event_target_as = great_khan
			recruitable = no
		}
		owner_species = { save_event_target_as = marauder_species }
		### Create Fleets
		event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_Khan1stFleet = yes }
		if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } } }
			every_planet_within_border = {
				limit = { has_planet_flag = CmtFlagMarauderExpRallyPoint }
				CmtEffectCreateAdmiralty_KhanStarterPack = yes
			}
		} else = {
			event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_KhanStarterPack = yes }
		}
		### Compat. replace hack for CM.
		event_target:great_khan.fleet = {
			create_ship = {
				design = "NAME_JuukTidir"
				graphical_culture = "npf_01_dirty"
				prefix = no
				# upgradable = no
			}
			random_owned_ship = {
				limit = { is_ship_size = marauder_galleon }
				delete_ship = this
			}
		}
		## Reinforcement cycle
		country_event = { id = marauder.520 days = 210 }
		set_variable = { which = CmtVarKhanReinforcementCounter value = 10 }
		if = {
			limit = { is_ai = yes }
			## Mercenaries Join
			country_event = { id = marauder.78 days = 20 }
			### Should not attack: the Khan is not that bad!
			make_moderately_hostile = yes
			set_country_flag = use_default_ships
		}

		### Notifications
		if = { limit = { has_country_flag = CmtFlagKhanVengeanceCountry }
			every_playable_country = {
				establish_communications_no_message = root
				country_event = { id = marauder.526 }
				observer_event = { id = observer.18 }
			}
		} else = {
			every_playable_country = {
				establish_communications_no_message = root
				country_event = { id = marauder.501 }
				observer_event = { id = observer.13 }
			}
		}

		### Mercenaries Defect
		if = {
			limit = {
				OR = {
					has_country_flag = marauder_1
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint1.solar_system.owner
						event_target:CmtTargetMarauderRallyPoint1.solar_system = { is_owned_by = root }
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				}
			}
			every_playable_country = {
				limit = { CmtTriggerCountryHiringMarauder1 = yes }
				set_country_flag = CmtFlagHiringMarauder1
			}
		}
		if = {
			limit = {
				OR = {
					has_country_flag = marauder_2
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint2.solar_system.owner
						event_target:CmtTargetMarauderRallyPoint2.solar_system = { is_owned_by = root }
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				}
			}
			every_playable_country = {
				limit = { CmtTriggerCountryHiringMarauder2 = yes }
				set_country_flag = CmtFlagHiringMarauder2
			}
		}
		if = {
			limit = {
				OR = {
					has_country_flag = marauder_3
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint3.solar_system.owner
						event_target:CmtTargetMarauderRallyPoint3.solar_system = { is_owned_by = root }
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanMultiple value = 5 } }
				}
			}
			every_playable_country = {
				limit = { CmtTriggerCountryHiringMarauder3 = yes }
				set_country_flag = CmtFlagHiringMarauder3
			}
		}
		every_playable_country = {
			limit = {
				OR = {
					has_country_flag = CmtFlagHiringMarauder1
					has_country_flag = CmtFlagHiringMarauder2
					has_country_flag = CmtFlagHiringMarauder3
				}
			}
			country_event = { id = marauder.77 days = 20 }
		}

		if = { limit = { exists = event_target:ratling_country }
			event_target:ratling_country = {
				set_variable = { which = "planets_lost_to_marauder" value = 15 }
				prev = {
					set_faction_hostility = {
						target = prev
						set_hostile = no
						set_neutral = yes
					}
				}
			}
		}
		set_timed_country_flag = { flag = raid_cooldown days = @raidcooldown }
	}
}

############################
### Standard War Process ###
############################

### Horde Conquers Planet
# This = country, leader attacker
# From = country, planet owner
# fromfrom = planet
country_event = {
	id = marauder.503
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_global_flag = marauder_crisis_ongoing
		exists = event_target:raider_khanate
		exists = from
		OR = {
			CmtTriggerIsKhanCountry = yes
			AND = { # Khan Subject
				is_subject_of_khan = yes
				is_ai = yes
				NOT = { has_country_flag = rebellion_cooldown }
				exists = from
				from = {
					is_subject_of_khan = no
					NOT = { is_country_type = awakened_marauders }
				}
			}
		}
		from = { merg_is_default_empire = yes }
	}

	immediate = {
		from = {
			change_variable = { which = "planets_lost_to_marauder" value = 1 }
			if = { limit = { prev = { can_copy_random_tech_from = { who = prev } } }
				prev = { copy_random_tech_from = { who = prev } }
			}
			if = { limit = { from.solar_system = { is_capital_system = yes } }
				change_variable = { which = "planets_lost_to_marauder" value = 1 }
				if = { limit = { prev = { can_copy_random_tech_from = { who = prev } } }
					prev = { copy_random_tech_from = { who = prev } }
				}
				if = { limit = { from = { is_capital = yes } }
					change_variable = { which = "planets_lost_to_marauder" value = 3 }
					if = { limit = { prev = { can_copy_random_tech_from = { who = prev } } }
						prev = { copy_random_tech_from = { who = prev } }
					}
				}
			}
			if = { limit = { NOT = { has_active_event = { marauder.504 } } }
				country_event = { id = marauder.504 days = 1 } # Notify + Hack
			}
			set_country_flag = former_owner@root.fromfrom

			from = {
				if = { limit = { num_pops > 20 }
					prev = { change_variable = { which = "planets_lost_to_marauder" value = 1 } }
					while = {
						count = 6
						limit = { num_pops > 20 }
						random_owned_pop = {
							limit = {
								is_robot_pop = no
								is_sapient = yes
							}
							weights = {
								base = 3
								modifier = { add = 1 OR = { is_pop_category = slave is_pop_category = purge } }
								modifier = { add = 1 is_unemployed = yes }
								modifier = { add = 1 NOT = { ideal_planet_class = prev } }
								modifier = { add = 2 NOT = { is_same_species = root.species } }
								# modifier = { add = 1 prev = { count_owned_pop = { limit = { is_same_species = prevprev.species } count < 4 } } }
							}
							# unemploy_pop = yes
							kill_pop = yes
						}
					}
				}

				### Create Marauder Pops
				save_event_target_as = conquered_planet
				planet_event = { id = marauder.105 }			# (Slaves)
				set_controller = event_target:raider_khanate	# Root not subjects
				if = { limit = { root = { is_country_type = awakened_marauders } }
					set_owner = root.from # Added due 3.4 unknow bug Khan is regocnized as Satrapy
					# Removed due 3.4 bug
					# set_owner = event_target:raider_khanate		# Root not subjects
				}

				set_variable = { which = CmtVarTemp value = 4 }
				if = { limit = { free_housing < 2 }
					change_variable = { which = CmtVarTemp value = 4 }
				} else_if = { limit = { free_housing < 6 free_housing > 1 }
					change_variable = { which = CmtVarTemp value = 8 }
				} else_if = { limit = { free_housing > 5 }
					change_variable = { which = CmtVarTemp value = 12 }
				}

				set_variable = { which = CmtVarTemp4 value = CmtVarTemp }
				divide_variable = { which = CmtVarTemp4 value = 4 }
				every_owned_pop = {
					# limit = {
					# 	is_robot_pop = no
					# 	is_sapient = yes
					# }
					unemploy_pop = yes
				}

				if = { limit = { exists = event_target:marauder_country_1 }
					while = {
						limit = { check_variable = { which = CmtVarTemp4 value > 0.5 } }
						create_pop = { species = event_target:marauder_country_1.owner_species }
						change_variable = { which = CmtVarTemp4 value = -1 }
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				set_variable = { which = CmtVarTemp4 value = CmtVarTemp }
				divide_variable = { which = CmtVarTemp4 value = 3 }
				if = { limit = { exists = event_target:marauder_country_2 }
					while = {
						limit = { check_variable = { which = CmtVarTemp4 value > 0.5 } }
						create_pop = { species = event_target:marauder_country_2.owner_species }
						change_variable = { which = CmtVarTemp4 value = -1 }
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				set_variable = { which = CmtVarTemp4 value = CmtVarTemp }
				divide_variable = { which = CmtVarTemp4 value = 2 }
				if = { limit = { exists = event_target:marauder_country_3 }
					while = {
						limit = { check_variable = { which = CmtVarTemp4 value > 0.5 } }
						create_pop = { species = event_target:marauder_country_3.owner_species }
						change_variable = { which = CmtVarTemp4 value = -1 }
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				while = { # rest
					limit = { check_variable = { which = CmtVarTemp value > 0.5 } }
					create_pop = { species = root }
					change_variable = { which = CmtVarTemp value = -1 }
				}

				# Flip Starbase ownership or create a new one.
				solar_system = {
					if = {
						limit = {
							exists = starbase
							starbase.fleet = {
								NOR = {
									is_owned_by = root
									is_owned_by = event_target:raider_khanate
								}
							}
						}
						starbase = {
							set_owner = event_target:raider_khanate # Root not subjects
						}
						# FIXME: needs possible workaround? As starbase from horde gets not conquered? See Fix id = khan.304-305
					} else = {
						create_starbase = {
							size = "starbase_marauder"
							owner = event_target:raider_khanate # Root not subjects
						}
					}
				}
				### Create Defense Armies (for some job reasons common armies get deleted)
				set_variable = { which = CmtVarTemp value = trigger:num_pops }
				divide_variable = { which = CmtVarTemp value = 5 }
				round_variable = CmtVarTemp
				if = { limit = { exists = event_target:marauder_country_1 }
					while = {
						count = 2
						create_army = {
							name = random
							owner = root
							species = event_target:marauder_country_1.owner_species
							type = "occupation_army"
						}
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				if = { limit = { exists = event_target:marauder_country_2 }
					while = {
						count = 2
						create_army = {
							name = random
							owner = root
							species = event_target:marauder_country_2.owner_species
							type = "occupation_army"
						}
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				if = { limit = { exists = event_target:marauder_country_3 }
					while = {
						count = 2
						create_army = {
							name = random
							owner = root
							species = event_target:marauder_country_3.owner_species
							type = "occupation_army"
						}
						change_variable = { which = CmtVarTemp value = -1 }
					}
				}
				while = { # rest
					limit = { check_variable = { which = CmtVarTemp value > 0.5 } }
					create_army = {
						name = random
						owner = root
						species = root.species
						type = "occupation_army"
					}
					change_variable = { which = CmtVarTemp value = -1 }
				}

				clear_variable = CmtVarTemp
				clear_variable = CmtVarTemp4

				if = {
					limit = {
						NOR = {
							# has_building = building_colony_shelter
							has_building = building_capital
							has_building = building_major_capital
							has_building = building_system_capital
							has_building = building_imperial_capital
							# building_hive_major_capital
							# building_machine_major_capital
							has_building = building_resort_major_capital
							has_building = building_slave_major_capital
							# building_ancient_control_center
							# building_ancient_palace
						}
					}
					add_building = building_capital
				}
			}
		}
	}
}

#######################
###- Death of Khan -###
#######################

### Khan defeated in Combat (on_ship_destroyed_victim) but NOT die.
# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# fromfrom = ship 1
country_event = {
	id = marauder.505
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_global_flag = marauder_crisis_ongoing
		exists = event_target:raider_khanate
		CmtTriggerIsKhanCountry = yes
		fromfrom = {
			exists = leader
			leader = { has_leader_flag = great_khan }
			NAND = {
				exists = fleet
				fleet = { num_ships > 0 }
			}
		}
		check_variable = { which = "CmtVarKhanRemainingLive" value > -0.5 }		## Not CmtGlobalVar
		OR = {
			NOT = { has_country_flag = great_khan_defeated_once } # CmtFlagKhanDefeatCountry
			check_variable = { which = "CmtVarKhanRemainingLive" value > 0.5 }		## Not CmtGlobalVar
		}
	}

	immediate = {
		# set_global_flag not needed
		set_country_flag = great_khan_defeated_once # CmtFlagKhanDefeatCountry
		change_variable = { which = "CmtVarKhanRemainingLive" value = -1 } ## Not CmtGlobalVar

		if = { limit = { exists = from }
			from = {
				save_event_target_as = khan_destroyer
				change_variable = { which = "planets_lost_to_marauder" value = -5 }
			}
		}
		fromfrom = {
			solar_system = { save_event_target_as = khan_death_system }
			leader = {
				save_event_target_as = great_khan
				exile_leader_as = exiled_khan
			}
		}
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.506 } # Notify
		}
		observer_event = { id = observer.14 }

		if = { limit = { has_global_flag = CmtFlagDebugMode }
			country_event = { id = marauder.523 days = 5 }
		} else = {
			event_target:global_event_country = {
				country_event = { id = marauder.523 days = 180 random = 160 }
			}
		}
	}
}

# Great Khan Defeated First Time.
country_event = {
	id = marauder.506
	title = "marauder.506.name"
	desc = "marauder.506.desc"
	picture = GFX_evt_sabotaged_ship
	show_sound = event_ship_explosion
	is_triggered_only = yes
	location = event_target:khan_death_system
	option = { name = marauder.506.a }
}

### Return of Khan
# This = raider_khanate
country_event = {
	id = marauder.507
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		event_target:marauder_rally_point = { CmtEffectCreateAdmiralty_Khan2ndFleetSet = yes }
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.508 }
		}
		observer_event = { id = observer.15 }
	}
}

### Khan Defeated in Combat And Die.
country_event = {
	id = marauder.509
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		CmtTriggerIsKhanCountry = yes
		fromfrom = {
			exists = leader
			fleet = { num_ships = 0 }
			leader = { has_leader_flag = great_khan }
		}
		OR = {
			check_variable = { which = "CmtVarKhanRemainingLive" value < -0.5 }		## Not CmtGlobalVar
			AND = {
				has_country_flag = great_khan_defeated_once # CmtFlagKhanDefeatCountry
				check_variable = { which = "CmtVarKhanRemainingLive" value < 0.5 }		## Not CmtGlobalVar
			}
		}
	}

	immediate = {
		set_global_flag = great_khan_dead
		set_country_flag = khan_dead_event_fine
		set_variable = { which = "CmtVarKhanRemainingLive" value = 0 }		## Not CmtGlobalVar

		if = { limit = { exists = event_target:great_khan_ruler }
			event_target:great_khan_ruler = { kill_leader = { show_notification = no } }
		}
		if = { limit = { exists = event_target:great_khan }
			event_target:great_khan = { kill_leader = { show_notification = no } }
		}

		from = {
			save_event_target_as = khan_destroyer
			set_country_flag = no_khan_do
			if = { limit = { merg_is_default_empire = yes } # is_ai = no
				country_event = { id = marauder.710 days = 10 random = 8 }
			}
		}
		fromfrom = { solar_system = { save_event_target_as = khan_death_system } }
		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.510 }
		}
		observer_event = { id = observer.16 }

		if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_1e random = @CmtConstKhanLifespan_1f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_2e random = @CmtConstKhanLifespan_2f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_4e random = @CmtConstKhanLifespan_4f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_5e random = @CmtConstKhanLifespan_5f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_6e random = @CmtConstKhanLifespan_6f }
		} else = { country_event = { id = marauder.600 days = @CmtConstKhanLifespan_3e random = @CmtConstKhanLifespan_3f } }
	}
}

### Sudden Death of Khan (on_monthly_pulse)
# Great Khan dies for other reasons.
event = {
	id = marauder.511
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = marauder_crisis_started
		NOR = {
			has_global_flag = khan_no_die
			has_global_flag = great_khan_dead
		}
		exists = event_target:raider_khanate
		event_target:raider_khanate = {
			NOR = {
				has_country_flag = CmtFlagKhanNoDieCountry
				has_country_flag = khan_dead_event_fine
			}
		}
	}
	immediate = {
		if = {
			limit = {
				exists = event_target:great_khan
				NAND = {
					exists = event_target:great_khan.fleet
					event_target:great_khan.fleet = { num_ships > 0 }
				}
			}
			if = { # Put him on a fleet.
				limit = {
					event_target:raider_khanate = {
						any_owned_fleet = {
							exists = solar_system
							is_mobile = yes
							is_in_combat = no
							NOR = {
								exists = leader
								has_fleet_flag = satrapy_garrison_fleet
							}
							fleet_power > 20000
						}
					}
				}
				event_target:raider_khanate = {
					# Assign the strongest fleet
					ordered_owned_fleet = {
						limit = {
							exists = solar_system
							is_mobile = yes
							is_in_combat = no
							NOR = {
								exists = leader
								has_fleet_flag = satrapy_garrison_fleet
							}
							fleet_power > 20000
						}
						position = 0
						order_by = trigger:fleet_power
						assign_leader = event_target:great_khan
						set_fleet_flag = khan_fleet
					}
				}
			} else = {
				event_target:marauder_rally_point = {
					if = { limit = { exists = event_target:great_khan }
						CmtEffectCreateAdmiralty_Khan1stFleet = yes
					} else = { # Try take exiled - not always work.
						event_target:raider_khanate = { CmtEffectCreateFleet_Khan2ndFleet = yes }
					}
				}
			}
		}
		if = {
			limit = {
				NAND = {
					exists = event_target:great_khan
					exists = event_target:great_khan.fleet
					# exists = exiled_khan
				}
			}
			event_target:raider_khanate = { country_event = { id = marauder.512 } }
			# event_target:CmtGlobalVar = { set_variable = { which = CmtVarKhanLifespan value = 1 } }
			break = yes
		} else = {
			# every_country = { currently only one Khan
			# limit = {
			# 	CmtTriggerIsKhanCountry = yes
			# 	NOT = { has_country_flag = CmtFlagKhanNoDieCountry }
			# }
			event_target:CmtGlobalVar = {
				random_list = {
					2 = { modifier = { factor = 0 check_variable = { which = CmtVarKhanLifespan value = 6 } } event_target:raider_khanate = { country_event = { id = marauder.512 } } }
					98 = { modifier = { factor = @CmtConstKhanLifespan_1b check_variable = { which = CmtVarKhanLifespan value = 1 } } modifier = { factor = @CmtConstKhanLifespan_2b check_variable = { which = CmtVarKhanLifespan value = 2 } } modifier = { factor = @CmtConstKhanLifespan_3b check_variable = { which = CmtVarKhanLifespan value = 3 } } modifier = { factor = @CmtConstKhanLifespan_4b check_variable = { which = CmtVarKhanLifespan value = 4 } } modifier = { factor = @CmtConstKhanLifespan_5b check_variable = { which = CmtVarKhanLifespan value = 5 } } }
				}
			}
		}
	}
}

### Great Khan Dies for Other Reasons.
country_event = {
	id = marauder.512
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		set_global_flag = great_khan_dead
		set_country_flag = khan_dead_event_fine
		random_list = {
			10 = { set_country_flag = khan_dead_poison }
			10 = { set_country_flag = khan_dead_disease }
			10 = { set_country_flag = khan_dead_assassin }
			10 = { set_country_flag = khan_dead_concubine }
		}

		if = { limit = { exists = event_target:great_khan_ruler }
			event_target:great_khan_ruler = { kill_leader = { show_notification = no } }
		}
		if = { limit = { exists = event_target:great_khan }
			event_target:great_khan = { kill_leader = { show_notification = no } }
		}

		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.513 }
		}
		observer_event = { id = observer.17 }
		if = { limit = { NOT = { has_relic = r_khans_throne } }
			add_relic = r_khans_throne
		}

		if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_1e random = @CmtConstKhanLifespan_1f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_2e random = @CmtConstKhanLifespan_2f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_4e random = @CmtConstKhanLifespan_4f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_5e random = @CmtConstKhanLifespan_5f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_6e random = @CmtConstKhanLifespan_6f }
		} else = { country_event = { id = marauder.600 days = @CmtConstKhanLifespan_3e random = @CmtConstKhanLifespan_3f } }
	}
}

### Great Khan Dies (Notify)
country_event = {
	id = marauder.513
	title = "marauder.510.name"
	desc = {
		text = marauder.513.a.desc
		trigger = { from = { has_country_flag = khan_dead_poison } }
	}
	desc = {
		text = marauder.513.b.desc
		trigger = { from = { has_country_flag = khan_dead_disease } }
	}
	desc = {
		text = marauder.513.c.desc
		trigger = { from = { has_country_flag = khan_dead_assassin } }
	}
	desc = {
		text = marauder.513.d.desc
		trigger = { from = { has_country_flag = khan_dead_concubine } }
	}
	desc = {
		text = marauder.513.e.desc
		trigger = { from = { has_country_flag = khan_dead_age } }
	}
	picture = GFX_evt_space_funeral
	show_sound = event_life_support_fail

	is_triggered_only = yes

	option = { name = marauder.510.a }
}

### Great Khan Dies of Old Ages.
country_event = {
	id = marauder.514
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_global_flag = marauder_crisis_ongoing
		CmtTriggerIsKhanCountry = yes
		NOT = { has_country_flag = khan_dead_age }
	}

	immediate = {
		set_global_flag = great_khan_dead
		set_country_flag = khan_dead_event_fine
		set_country_flag = khan_dead_age

		if = { limit = { exists = event_target:great_khan_ruler }
			event_target:great_khan_ruler = {
				remove_leader_flag = great_khan				# Because possible loop trigger?
				kill_leader = { show_notification = no }
			}
		}
		if = { limit = { exists = event_target:great_khan }
			event_target:great_khan = {
				remove_leader_flag = great_khan				# Because possible loop trigger?
				kill_leader = { show_notification = no }
			}
		}

		every_playable_country = {
			limit = { is_ai = no }
			country_event = { id = marauder.513 }
		}
		observer_event = { id = observer.17 }
		if = { limit = { NOT = { has_relic = r_khans_throne } }
			add_relic = r_khans_throne
		}
		if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 1 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_1e random = @CmtConstKhanLifespan_1f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 2 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_2e random = @CmtConstKhanLifespan_2f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 4 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_4e random = @CmtConstKhanLifespan_4f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 5 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_5e random = @CmtConstKhanLifespan_5f }
		} else_if = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanLifespan value = 6 } } }
			country_event = { id = marauder.600 days = @CmtConstKhanLifespan_6e random = @CmtConstKhanLifespan_6f }
		} else = { country_event = { id = marauder.600 days = @CmtConstKhanLifespan_3e random = @CmtConstKhanLifespan_3f } }
	}
}

### Marauder Reinforcement Cycle at Capital (Regular)
# This = Marauder
country_event = {
	id = marauder.520
	hide_window = yes
	is_triggered_only = yes

	trigger = { CmtTriggerIsKhanCountry = yes }

	immediate = {
		event_target:CmtGlobalVar = {
			if = {
				limit = {
					NOR = {
						check_variable = { which = CmtVarReinforceCycle_Khan value = 2 }
						check_variable = { which = CmtVarReinforceCycle_Khan value = 3 }
						check_variable = { which = CmtVarReinforceCycle_Khan value = 4 }
					}
				}
				CmtEffectKhanReinforceOnCapital = yes
				root = { country_event = { id = marauder.520 days = 340 } }
			} else = {
				if = { limit = { root = { check_variable = { which = CmtVarKhanReinforcementCounter value > 9.5 } } }
					CmtEffectKhanReinforceOnCapital = yes
					root = { change_variable = { which = CmtVarKhanReinforcementCounter value = -10 } }
				}
				CmtEffectKhanIncreasementReinforcementCycle = yes		## required: prev = root
				root = { country_event = { id = marauder.520 days = 68 } } # days = 34 ??
			}
		}
	}
}

#########################################################
### Awakening for Vengeance: on_ship_destroyed_victim ###
#########################################################

# Horde Triggered Through Destruction of Stations.
country_event = {
	id = marauder.525
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = marauder_crisis_ongoing }
		is_country_type = dormant_marauders
		end_game_years_passed < event_target:CmtGlobalVar.CmtVarKhanLatestEgpy
		fromfrom = {
			exists = solar_system
			solar_system = { has_star_flag = marauder_system }
			OR = {
				is_ship_size = marauder_void_dwelling
				is_ship_size = starbase_marauder
			}
		}
		from = { merg_is_default_empire = yes } # There are some unpredictable possiblities.
		event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value != 1 } }
		OR = {
			count_owned_ship = {
				limit = { is_ship_size = marauder_void_dwelling }
				count > 1
			}
			AND = {
				event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 5 } }
				count_owned_ship = {
					limit = { is_ship_size = marauder_void_dwelling }
					count > 0
				}
			}
		}
		CmtTriggerKhanAwakingMultipleCheck = yes
	}

	immediate = {
		from = { save_event_target_as = awakened_horde }
		# Since 3.0: reduce possibility if too early
		set_variable = { which = CmtVarKhanProbability value = trigger:years_passed }

		if = { limit = { NOT = { is_variable_set = CmtVarHalfMidgame } }
			get_galaxy_setup_value = { which = CmtVarHalfMidgame setting = mid_game_year }
			change_variable = { which = CmtVarHalfMidgame value = event_target:CmtGlobalVar.CmtVarKhanEarliestMgpy }
			divide_variable = { which = CmtVarHalfMidgame value = 2 }
		}
		if = { limit = { check_variable = { which = CmtVarHalfMidgame value > 0 } }
			divide_variable = { which = CmtVarKhanProbability value = CmtVarHalfMidgame }
		}
		subtract_variable = { which = CmtVarKhanProbability value = 1 }

		random_list = {
			2 = {
				modifier = {		## 9.9%
					factor = 5.5
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 3 } }
				}
				modifier = {		## 28.6%
					factor = 20
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 4 } }
				}
				modifier = {
					factor = CmtVarKhanProbability					# = 2*curY/mgY-1
					check_variable = { which = CmtVarKhanProbability value < 1 }
				}
				set_global_flag = horde_triggered
				set_country_flag = CmtFlagKhanVengeanceCountry
				country_event = { id = marauder.500 }
			}
			100 = {
				modifier = {
					factor = 0
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanVengeance value = 5 } }
				}
				fromfromfrom.solar_system = {
					system_event = { id = marauder.17 days = 360 } # Rebuild marauder starbase
				}
			}
		}
	}
}


##########################
##		Great Khan		##
##		Diplomacy 		##
##########################
country_event = {
	id = marauder.550
	title = "greatkhan_diplo_header"
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.a.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.b.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.c.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.d.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.e.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.f.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.g.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.h.desc"
	}
	desc = {
		trigger = {
			is_subject_of_khan = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
		}
		text = "marauder.550.i.desc"
	}
	desc = {
		trigger = {
			is_subject = yes
			any_agreement = { agreement_preset = preset_satrapy }
		}
		text = "marauder.550.j.desc"
	}
	desc = {
		trigger = {
			is_subject = yes
			any_agreement = { agreement_preset = preset_satrapy }
		}
		text = "marauder.550.k.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_machine_empire = yes
		}
		text = "marauder.550.l.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_machine_empire = yes
		}
		text = "marauder.550.m.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_hive_empire = yes
		}
		text = "marauder.550.n.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_hive_empire = yes
		}
		text = "marauder.550.o.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_gestalt = no
		}
		text = "marauder.550.p.desc"
	}
	desc = {
		trigger = {
			any_agreement = { agreement_preset = preset_satrapy }
			is_gestalt = no
		}
		text = "marauder.550.q.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.r.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.s.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.t.desc"
	}
	desc = {
		trigger = { has_country_flag = rebelling_satrapy }
		text = "marauder.550.u.desc"
	}
	desc = {
		trigger = { is_homicidal = yes }
		text = "marauder.550.v.desc"
	}
	desc = {
		trigger = { from = { has_country_flag = marauder_2 } }
		text = "marauder.550.w.desc"
	}

	picture_event_data = {
		portrait = event_target:raider_khanate
		room = ethic_spaceship_room
	}
	is_triggered_only = yes
	force_open = yes
	diplomatic = yes

	trigger = {
		exists = event_target:raider_khanate
		OR = {
			NOT = { exists = from }
			from = { CmtTriggerIsKhanCountry = yes }
		}
		NOT = { has_country_flag = marauder_diplomacy_engaged }
	}
	immediate = { set_country_flag = marauder_diplomacy_engaged }
	after = {
		hidden_effect = { remove_country_flag = marauder_diplomacy_engaged }
	}

	option = {		# Submit?
		name = marauder.550.a
		trigger = {
			is_subject_of_khan = no
			has_been_declared_crisis = no
			NOT = { has_country_flag = rebelling_satrapy }
			is_homicidal = no
			is_fallen_empire = no
		}
		allow = {
			custom_tooltip = {
				fail_text = 03_EMBASSY_HOSTILE # marauder.550.a_fail
				hidden_trigger = {
					OR = {
						is_variable_set = "planets_lost_to_marauder"
						from = { NOT = {  has_country_flag = raid_cooldown } }
						from = { is_overlord = yes }
					}
				}
			}
			NOT = { has_active_event = { marauder.551 } }
		}
		hidden_effect = {
			country_event = { id = marauder.551 }
		}
		ai_chance = {
			factor = 5
			modifier = { factor = 0.1 NOT = { is_variable_set = "planets_lost_to_marauder" } }
		}
	}
	option = {
		# Submit? Already rebelled
		name = marauder.550.a
		trigger = { has_country_flag = rebelling_satrapy }
		response_text = marauder.550.a.2.response
		is_dialog_only = yes
	}
	option = {
		name = marauder.550.b
		trigger = {
			from = { has_country_flag = marauder_2 }
			NOR = {
				has_country_flag = asked_about_language
				is_homicidal = yes
			}
		}
		response_text = marauder.550.b.response
		is_dialog_only = yes
		hidden_effect = { set_country_flag = asked_about_language }
		ai_chance = { factor = 0.1 }
	}

	option = {
		name = marauder.550.c
		trigger = {
			from = { has_country_flag = marauder_3 }
			NOR = {
				has_country_flag = asked_about_religion
				is_homicidal = yes
			}
		}
		response_text = marauder.550.c.response
		is_dialog_only = yes
		hidden_effect = { set_country_flag = asked_about_religion }
		ai_chance = { factor = 0.1 }
	}

	option = {		# Rebel?
		name = marauder.550.d
		trigger = { any_agreement = { agreement_preset = preset_satrapy } }
		allow = {
			custom_tooltip = {
				fail_text = marauder.550.d_fail
				NOT = { has_country_flag = rebellion_cooldown }
			}
		}
		hidden_effect = { country_event = { id = marauder.554 } }
	}

	option = {
		name = marauder.20.e
		default_hide_option = yes
		ai_chance = { factor = 0.1 }
	}
}

### Initial Reinforcement for Encouraging Satrap.
### Marauder Establishes Base in Capital System.
country_event = {
	id = marauder.553
	title = "marauder.553.name"
	desc = "marauder.553.desc"
	picture = GFX_evt_khan_throne_room
	show_sound = event_conversation
	location = event_target:garrison_base

	is_triggered_only = yes

	immediate = {
		save_event_target_as = satrapy_empire
		if = { limit = { exists = capital_scope }
			capital_scope = { save_event_target_as = capital_planet }
		} else = {
			ordered_owned_planet = {
				limit = { is_colony = yes }
				position = 0
				order_by = trigger:num_pops
				save_event_target_as = capital_planet
			}
		}
		event_target:capital_planet = {
			solar_system = { save_event_target_as = capital_system }
		}
		event_target:raider_khanate = {
			if = { limit = { is_hostile = prev }
				set_faction_hostility = {
					target = prev
					set_hostile = no
					set_neutral = yes
				}
			}
			country_event = { id = khan.309 days = 1 } # To be sure
		}
		# CmtEffectCreateEncouragingBase = yes		## event_target:garrison_base
		create_fleet = {
			effect = {
				set_owner = event_target:raider_khanate
				create_ship = {
					name = "NAME_Garrison_Base"
					design = "NAME_Void_Dwelling"
					graphical_culture = event_target:raider_khanate
				}
				set_location = {
					target = event_target:capital_planet
					distance = 50
					angle = random
				}
				save_event_target_as = garrison_base
				set_fleet_flag = satrapy_garrison
				if = {
					limit = {
						event_target:CmtGlobalVar = {
							OR = {
								check_variable = { which = CmtVarReinforceCycle_Khan value = 2 }
								check_variable = { which = CmtVarReinforceCycle_Khan value = 3 }
								check_variable = { which = CmtVarReinforceCycle_Khan value = 4 }
							}
						}
					}
					set_variable = { which = CmtVarKhanReinforcementCounter value = 10 } # Base scope
				}
				fleet_event = { id = marauder.560 days = 10 }
			}
		}

		last_created_fleet = {
			# CmtEffectCreateAdmiralty_KhanEncourager
			event_target:raider_khanate = {
				create_fleet = {
					name = "NAME_Garrison_Fleet"
					effect = {
						set_owner = prev
						set_fleet_flag = satrapy_garrison_fleet
						event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlShip value = CmtVarFleetPower_Khan } }
						prev = { CmtEffectResetLoop = yes }
						while = {
							limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlShip value > 0.125 } } }
							event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlShip value = -0.25 } }
							while = { count = 5 CmtEffectCreateShip_Outrider = yes }			## 22
							while = { count = 3 CmtEffectCreateShip_Lancer = yes }				## 14
							while = { count = 2 CmtEffectCreateShip_VoidChampion = yes }		## 8
							prev = {
								CmtEffectProgressLoop2 = yes
								switch = {
									trigger = has_country_flag
									CmtFlagLoopA = { prev = { CmtEffectCreateShip_Lancer = yes } }
									CmtFlagLoopZ = { prev = { CmtEffectCreateShip_Outrider = yes } }
								}
							}
						}
						CmtFleetSetAuxParam_KhanEncourager = yes
					}
					settings = {
						garrison = yes
						uses_naval_capacity = no
					}
				}
			}
		}
	}

	option = { name = marauder.553.a }
	after = {
		hidden_effect = {
			event_target:raider_khanate = {
				copy_random_tech_from = { who = prev area = physics }
			}
		}
	}
}

###########################
### While Khan Reigning ###
###########################

### NPC (AI Empire) Submits to Marauder.
country_event = {
	id = marauder.555
	hide_window = yes
	trigger = {
		has_global_flag = marauder_crisis_ongoing
		NOR = {
			has_global_flag = great_khan_dead
			# has_global_flag = great_khan_wins
			has_country_flag = rebelling_satrapy
			has_been_declared_crisis = yes
			has_country_flag = rebellion_cooldown
		}
		any_country = { CmtTriggerIsKhanCountry = yes } # exists = event_target:raider_khanate
		merg_is_default_empire = yes
		is_subject = no
		is_ai = yes
		check_variable = { which = "planets_lost_to_marauder" value > 2 }
		is_homicidal = no
		relative_power = {
			who = event_target:raider_khanate
			category = fleet
			value < inferior
		}
	}
	mean_time_to_happen = {
		years = 6
		modifier = {
			factor = 0.5
			OR = {
				check_variable = { which = "planets_lost_to_marauder" value > 11 }
				num_owned_planets < 3
			}
		}
		modifier = {
			factor = 0.1
			OR = {
				check_variable = { which = "planets_lost_to_marauder" value > 22 }
				num_owned_planets < 3
			}
		}
		modifier = {
			factor = 3
			OR = {
				has_global_flag = great_khan_wins
				has_ai_personality = honorbound_warriors
				is_galactic_emperor = yes
				is_part_of_galactic_council = yes
				# has_ai_personality = technological_warriors ? from mod
			}
		}
		modifier = {
			factor = 2
			OR = {
				has_ai_personality = xenophobic_isolationists
				is_gestalt = yes
				has_federation = yes
				is_part_of_galactic_council = yes
			}
		}
		modifier = {
			factor = 0.5
			OR = {
				has_ai_personality = peaceful_traders
				has_origin = "origin_khan_successor"
			}
		}
		modifier = {
			factor = 0.2
			OR = {
				has_ai_personality = fanatic_befrienders
				relative_power = {
					who = event_target:raider_khanate
					category = fleet
					value < inferior
				}
				AND = {
					is_at_war = yes
					def_war_exhaustion_sum > 0.95
				}
			}
		}
	}
	immediate = {
		# var = "planets_lost_to_marauder" is increased on .503, .527 and .528
		# country_event = { id = marauder.550 } # Submit to Khan
		country_event = { id = khan.559 days = -1 } # Pre-Submit to Khan
		set_subject_of = { who = event_target:raider_khanate preset = preset_satrapy }
		event_target:raider_khanate = {
			if = { limit = { is_hostile = prev }
				set_faction_hostility = {
					target = prev
					set_hostile = no
					# set_neutral = yes
					set_friendly = yes
				}
			}
			country_event = { id = khan.309 days = 1 } # To be sure
		}
	}
}

### Regular Reinforcements at Capital of Satrap (Marauder Auxiliary Cycle)
# This = Garrison_Base
fleet_event = {
	id = marauder.560
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_scope_valid = yes
		exists = owner
		exists = event_target:raider_khanate
		any_country = { CmtTriggerIsKhanCountry = yes }
		OR = {
			is_owned_by = event_target:raider_khanate
			AND = {
				exists = event_target:marauders_garrison_1
				is_owned_by = event_target:marauders_garrison_1
			}
		}
	}

	immediate = {
		if = {
			limit = {
				NOT = { exists = event_target:satrapy_empire }
				exists = space_owner
				space_owner = {
					is_subject_of_khan = yes
					NOT = { has_country_flag = rebelling_satrapy }
					exists = overlord # is_overlord_to not working
					root.owner = { is_same_empire = prev.overlord }
				}
			}
			space_owner = { save_event_target_as = satrapy_empire }
		}
		if = { limit = { exists = event_target:satrapy_empire }
			event_target:satrapy_empire = {
				owner_species = { save_event_target_as = satrapy_species }
				set_variable = { which = "satrapy_fleet_power" value = trigger:fleet_power }
				# Get normal possible capacity (divide by 0 cause crash)
				if = { limit = { check_variable_arithmetic = { which = trigger:used_naval_capacity_percent value > 0 } }
					divide_variable = { which = "satrapy_fleet_power" value = trigger:used_naval_capacity_percent }
				} else = { multiply_variable = { which = "satrapy_fleet_power" value = 11 } }
				divide_variable = { which = "satrapy_fleet_power" value = 26000 }
				round_variable = "satrapy_fleet_power"
				if = { limit = { check_variable = { which = "satrapy_fleet_power" value < 3 } }
					set_variable = { which = "satrapy_fleet_power" value = 3 }
				} else_if = { limit = { check_variable = { which = "satrapy_fleet_power" value > 6 } }
					set_variable = { which = "satrapy_fleet_power" value = 6 }
				}
			}
			if = {
				limit = {
					solar_system = {
						count_fleet_in_system = {
							count < event_target:satrapy_empire.satrapy_fleet_power
							limit = {
								is_owned_by = event_target:raider_khanate
								has_fleet_flag = horde_auxuliaries
							}
						}
					}
					OR = {
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarReinforceCycle_Khan value < 2 } }
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarReinforceCycle_Khan value > 4 } }
						check_variable = { which = CmtVarKhanReinforcementCounter value > 9.5 }
					}
				}
				# CmtEffectCreateAdmiralty_KhanSubReinforcement
				event_target:raider_khanate = {
					event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = CmtVarCombatFleetNumber_Khan } }
					while = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.875 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -1 } }
						if = { limit = { event_target:satrapy_empire = { max_naval_capacity < 100 } }
							CmtEffectCreateFleet_KhanSubReinforcement1 = yes
						} else_if = { limit = { event_target:satrapy_empire = { max_naval_capacity < 200 } }
							CmtEffectCreateFleet_KhanSubReinforcement2 = yes
						} else_if = { limit = { event_target:satrapy_empire = { max_naval_capacity < 300 } }
							CmtEffectCreateFleet_KhanSubReinforcement3 = yes
						} else_if = { limit = { event_target:satrapy_empire = { max_naval_capacity < 500 } }
							CmtEffectCreateFleet_KhanSubReinforcement4 = yes
						} else = { CmtEffectCreateFleet_KhanSubReinforcement5 = yes }
					}
					while = { limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.125 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -0.25 } }
						random_list = {
							100 = {
								event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = 0 } }
								if = { limit = { event_target:satrapy_empire = { max_naval_capacity < 100 } }
									CmtEffectCreateFleet_KhanSubReinforcement1 = yes
								} else_if = { limit = { event_target:satrapy_empire = { max_naval_capacity < 200 } }
									CmtEffectCreateFleet_KhanSubReinforcement2 = yes
								} else_if = { limit = { event_target:satrapy_empire = { max_naval_capacity < 300 } }
									CmtEffectCreateFleet_KhanSubReinforcement3 = yes
								} else_if = { limit = { event_target:satrapy_empire = { max_naval_capacity < 500 } }
									CmtEffectCreateFleet_KhanSubReinforcement4 = yes
								} else = { CmtEffectCreateFleet_KhanSubReinforcement5 = yes }
							}
							300 = { }
						}
					}
				}
				change_variable = { which = CmtVarKhanReinforcementCounter value = -10 }
			}

			if = {
				limit = {
					event_target:CmtGlobalVar = {
						OR = {
							check_variable = { which = CmtVarReinforceCycle_Khan value < 2 }
							check_variable = { which = CmtVarReinforceCycle_Khan value > 4 }
						}
					}
				}
				fleet_event = { id = marauder.560 days = 600 random = 300 }
			} else = {
				fleet_event = { id = marauder.560 days = 160 random = 80 }
				# Set var counter (CmtVarKhanReinforcementCounter) for next cycle
				event_target:raider_khanate = { event_target:CmtGlobalVar = { CmtEffectKhanIncreasementReinforcementCycle = yes } }
			}
		} # else cycle ends
	}
}

### The Future of the Horde (HIDDEN)
country_event = {
	id = marauder.600
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			is_country_type = awakened_marauders
			AND = {
				exists = event_target:raider_khanate
				is_same_empire = event_target:raider_khanate
			}
		}
		NOT = { has_country_flag = marauder600_happened }
	}

	immediate = {
		set_country_flag = marauder600_happened
		set_country_flag = khan_dead_event_fine
		remove_global_flag = khan_no_die
		remove_global_flag = great_khan_announcement
		remove_country_flag = CmtFlagKhanNoDieCountry
		remove_global_flag = marauder_crisis_ongoing	# must be removed before
		room_name_override = ""

		if = {
			limit = { num_owned_planets < 1 } # If Horde owns no planet.
			country_event = { id = marauder.604 } # Reverts to old ways.
		} else = {
			if = {
				limit = {
					OR = {
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value != 1 } }
						AND = {
							num_owned_planets > 6
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value != 1 } }
						}
						AND = {
							count_country = { limit = { is_subject_of_khan = yes } count > 1 }
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value != 1 } }
						}
					}
				}
				random_list = {
					60 = {
						modifier = {
							factor = 0
							OR = {
								num_owned_planets < 7
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value = 1 } }
							}
						}
						modifier = {
							factor = 0.167
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value = 2 } }
						}
						modifier = {
							factor = 0.334
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathSplinter value = 3 } }
						}
						modifier = { factor = 2 num_owned_planets > 11 }
						country_event = { id = marauder.601 } # Fractures into Diadochi
					}
					10 = {
						modifier = {
							factor = 0
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value = 1 } }
						}
						modifier = {
							factor = 2
							OR = {
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value = 3 } }
								has_country_flag = diadochi
								has_country_flag = new_khanate_flag
							}
						}
						modifier = {
							factor = 6
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathKhanate value = 4 } }
						}
						modifier = { factor = 0.1 num_owned_planets > 15 }
						country_event = { id = marauder.602 } # Stays united in New Khanate.
					}
					10 = {
						modifier = {
							factor = 0 # Can only happen if there are enough Satrapies.
							OR = {
								count_country = { limit = { is_subject_of_khan = yes } count < 2 }
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value = 1 } }
							}
						}
						modifier = {
							factor = 2
							OR = {
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value = 3 } }
								has_origin = "origin_khan_successor"
							}
						}
						modifier = {
							factor = 6
							event_target:CmtGlobalVar = { check_variable = { which = CmtVarKhanPostDeathDemocratic value = 4 } }
						}
						modifier = { factor = 0.1 num_owned_planets > 15 }
						country_event = { id = marauder.603 } # Turns into Democratic Federation
					}
				}
			} else = {
				random_list = {
					60 = {
						modifier = { factor = 0 num_owned_planets < 7 }
						modifier = { factor = 2 num_owned_planets > 11 }
						country_event = { id = marauder.601 } # Fractures into Diadochi
					}
					10 = {
						modifier = { factor = 0 num_owned_planets > 15 }
						modifier = { factor = 2 has_origin = "origin_khan_successor" }
						country_event = { id = marauder.602 } # Stays united in New Khanate.
					}
					10 = {
						modifier = {
							factor = 0 # Can only happen if there are enough Satrapies.
							OR = {
								num_owned_planets > 15
								count_country = { limit = { is_subject_of_khan = yes } count < 2 }
							}
						}
						modifier = { factor = 2 has_origin = "origin_khan_successor" }
						country_event = { id = marauder.603 } # Turns into Democratic Federation
					}
				}
			}
		}
		clear_global_event_target = marauder_rally_point
		event_target:CmtGlobalVar = {
			if = { limit = { check_variable = { which = CmtVarKhanMultiple value = 3 } }
				remove_global_flag = CmtFlagNowInKhanInterval
				if = {
					limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T0 } } # 7.5
					if = { limit = { check_variable = { which = CmtVarKhanInterval value > 0 } }
						set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = CmtVarKhanInterval }
					}
					### Do nothing
				} else_if = { limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T1 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D1 }
				} else_if = { limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T2 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D2 }
				} else_if = { limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T3 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D3 }
				} else_if = { limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T4 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D4 }
				} else_if = { limit = { check_variable = { which = CmtVarKhanInterval value < @CmtConstKhanInterval_T5 } }
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstKhanInterval_D5 }
				} else = {
					set_timed_global_flag = { flag = CmtFlagNowInKhanInterval days = @CmtConstTUnq_ConstKhanInterval }
				}
			}
		}
	}
	after = {
		hidden_effect = {
			if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint1 }
				clear_global_event_target = CmtTargetMarauderRallyPoint1
			}
			if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint2 }
				clear_global_event_target = CmtTargetMarauderRallyPoint2
			}
			if = { limit = { exists = event_target:CmtTargetMarauderRallyPoint3 }
				clear_global_event_target = CmtTargetMarauderRallyPoint3
			}
		}
	}
}

# New Fleet (Fix missing ship_piracy_suppression_add)
country_event = {
	id = marauder.704
	title = "marauder.704.name"
	desc = "marauder.704.desc"
	picture = GFX_evt_pirate_armada
	show_sound = event_radio_chatter
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = marauder_neighbor_event_4 }
		years_passed > 30
	}
	immediate = { set_country_flag = marauder_neighbor_event_4 }
	option = {
		name = marauder.704.a
		create_fleet = {
			name = "NAME_Salvaged_Fleet"
			effect = {
				set_owner = root
				create_dyn_pirate_fleet = { Skull = 6 Corsair = 3 Black_Earl = 2 }
				set_location = root.capital_scope
			}
		}
		custom_tooltip = gain_marauder_fleet
		# hidden_effect = {
		# 	create_fleet = {
		# 		name = "NAME_Salvaged_Fleet"
		# 		effect = {
		# 			set_owner = root
		# 			while = {
		# 				count = 1
		# 				create_ship = {
		# 					name = random
		# 					prefix = no
		# 					design = "NAME_Black_Earl"
		# 					graphical_culture = "pirate_01"
		# 				}
		# 			}
		# 			create_dyn_pirate_fleet = { Skull = 10 Corsair = 4 }
		# 			set_location = root.capital_scope
		# 		}
		# 	}
		# }
	}
	option = {
		name = marauder.704.b
		add_resource = { minerals = 200 }
	}
}
