# Replaced graphical_culture = prev.owner # "madd_01"
# Not really necessary, as vanilla graphical_culture gets ignored if invalid.
## Vanilla fixed
# [effect_on_blob] Invalid center target at file: scripted effect assign_first_diadochi_planets
# [effect_on_blob] Invalid center target at file: scripted effect assign_second_diadochi_planets
# [effect_on_blob] Invalid center target at file: scripted effect assign_third_diadochi_planets
# [effect_on_blob] Invalid center target at file: scripted effect assign_fourth_diadochi_planets

# This = Fleet
create_dyn_marauder_fleet = {
	# default: OUTRIDER = 18 LANCER = 12 CHAMPION = 6 GLORY = 1
	while = { count = $OUTRIDER|18$
		# count = @\[ $AMOUNT|3$ * 6 ]
		create_ship = {
			name = random
			design = NAME_Outrider$VARIANT$
			prefix = no
			# upgradable = yes
			graphical_culture = "pirate_01" # "madd_01" # prev.owner
		}
	}
	while = { count = $LANCER|12$
		create_ship = {
			name = random
			design = NAME_Lancer$VARIANT$
			prefix = no
			# upgradable = yes
			graphical_culture = prev.owner # "madd_01"
		}
	}
	while = { count = $CHAMPION|6$
		create_ship = {
			name = random
			design = NAME_Void_Champion$VARIANT$
			prefix = no
			# upgradable = yes
			graphical_culture = prev.owner # "madd_01"
		}
	}
	while = { count = $GLORY|1$
		create_ship = {
			name = random
			design = NAME_Ancestral_Glory$VARIANT$
			prefix = no
			# upgradable = yes
			graphical_culture = prev.owner # "madd_01"
		}
	}
}

create_1st_khan_fleet = {
	optimize_memory
	create_fleet = {
		name = "NAME_Chosen_of_the_Great_Khan"
		effect = {
			set_owner = event_target:raider_khanate
			create_ship = {
				# name = "NAME_JuukTidir"
				design = "NAME_JuukTidir"
				# random_existing_design = npc_galleon_01
				graphical_culture = "npf_01" # _dirty
			}
			assign_leader = last_created_leader
			set_fleet_flag = khan_fleet
			if = {
				limit = {
					OR = {
						has_global_flag = expanded_spaceborne_installed
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarFleetPower_Khan value > 1.74 } }
					}
				}
				create_dyn_marauder_fleet = { OUTRIDER = 36 LANCER = 24 CHAMPION = 12 }
			}
			else = {
				create_dyn_marauder_fleet = { GLORY = 0 }
			}
			set_location = {
				target = event_target:marauder_rally_point
				distance = 45
				angle = random
			}
			set_home_base = event_target:marauder_rally_point.solar_system.starbase
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
			spawn_debris = yes
		}
	}
}

create_2nd_khan_fleet = {
	optimize_memory
	create_fleet = {
		name = "NAME_Chosen_of_the_Great_Khan"
		effect = {
			set_owner = event_target:raider_khanate
			create_ship = {
				# name = "NAME_Glorious_Might"
				design = "NAME_Glorious_Might"
				# random_existing_design = npc_galleon_01
				graphical_culture = "npf_01_dirty"
			}
			set_leader = exiled_khan
			set_fleet_flag = khan_fleet
			if = {
				limit = {
					OR = {
						has_global_flag = expanded_spaceborne_installed
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarFleetPower_Khan value > 1.74 } }
					}
				}
				create_dyn_marauder_fleet = { OUTRIDER = 36 LANCER = 24 CHAMPION = 12 }
			}
			else = { create_dyn_marauder_fleet = yes }
			save_event_target_as = khan_fleet
			set_location = {
				target = event_target:marauder_rally_point
				distance = 45
				angle = random
			}
			set_home_base = event_target:marauder_rally_point.solar_system.starbase
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
			spawn_debris = yes
		}
	}
}

create_marauder_fleet = {
	optimize_memory # As replaced and not used by this mod
	CmtEffectCreateAdmiral_MarauderStandard = yes
	create_fleet = {
		effect = {
			random_list = {
				50 = {
					set_owner = event_target:raider_khanate
					if = {
						limit = {
							OR = {
								has_global_flag = expanded_spaceborne_installed
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarFleetPower_Khan value > 1.74 } }
							}
						}
						create_dyn_marauder_fleet = { OUTRIDER = 32 LANCER = 16 CHAMPION = 12 }
					}
					else = {
						create_dyn_marauder_fleet = { OUTRIDER = 16 LANCER = 8 }
					}
				}
				50 = { # Own ships
					set_owner = root
					while = { count = 16
						create_ship = {
							name = random
							prefix = no
							random_existing_design = corvette
							graphical_culture = root
						}
					}
					while = { count = 8
						create_ship = {
							name = random
							prefix = no
							random_existing_design = destroyer
							graphical_culture = root
						}
					}
					if = {
						limit = { root = { any_owned_design = { is_ship_size = cruiser } } }
						while = { count = 3
							create_ship = {
								name = random
								prefix = no
								random_existing_design = cruiser
								graphical_culture = root
							}
						}
					}
				}
			}

			assign_leader = last_created_leader
			set_location = {
				target = event_target:marauder_rally_point
				distance = 45
				angle = random
			}
			set_home_base = event_target:marauder_rally_point.solar_system.starbase
		}
		settings = {
			uses_naval_capacity = no
			can_upgrade = no
			can_change_composition = no
		}
	}
	last_created_fleet = { set_owner = event_target:raider_khanate }
}

create_small_marauder_auxiliaries = {
	optimize_memory
	CmtEffectCreateAdmiral_MarauderEncourager = yes
	create_fleet = {
		name = { key = "NAME_Horde_Auxiliary_Fleet" variable_string = "\\[satrapy_species.GetName\\]" }
		effect = {
			set_owner = event_target:raider_khanate
			set_fleet_flag = horde_auxuliaries
			if = {
				limit = {
					OR = {
						has_global_flag = expanded_spaceborne_installed
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarFleetPower_Khan value > 1.74 } }
					}
				}
				create_dyn_marauder_fleet = { OUTRIDER = 20 LANCER = 8 CHAMPION = 4 GLORY = 0 }
			}
			else = {
				create_dyn_marauder_fleet = { OUTRIDER = 10 LANCER = 4 CHAMPION = 2 GLORY = 0 }
			}
			assign_leader = last_created_leader
			set_location = {
				target = root
				distance = 10
				angle = random
			}
			set_home_base = root.solar_system.starbase
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_medium_marauder_auxiliaries = {
	optimize_memory
	CmtEffectCreateAdmiral_MarauderEncourager = yes
	create_fleet = {
		name = { key = "NAME_Horde_Auxiliary_Fleet" variable_string = "\\[satrapy_species.GetName\\]" }
		effect = {
			set_owner = event_target:raider_khanate
			set_fleet_flag = horde_auxuliaries
			if = {
				limit = {
					OR = {
						has_global_flag = expanded_spaceborne_installed
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarFleetPower_Khan value > 1.74 } }
					}
				}
				create_dyn_marauder_fleet = { OUTRIDER = 32 LANCER = 16 CHAMPION = 12 }
			}
			else = { create_dyn_marauder_fleet = yes }
			assign_leader = last_created_leader
			set_location = {
				target = root
				distance = 10
				angle = random
			}
			set_home_base = root.solar_system.starbase
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_large_marauder_auxiliaries = {
	optimize_memory
	CmtEffectCreateAdmiral_MarauderEncourager = yes
	create_fleet = {
		name = { key = "NAME_Horde_Auxiliary_Fleet" variable_string = "\\[satrapy_species.GetName\\]" }
		effect = {
			set_owner = event_target:raider_khanate
			set_fleet_flag = horde_auxuliaries
			if = {
				limit = {
					OR = {
						has_global_flag = expanded_spaceborne_installed
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarFleetPower_Khan value > 1.74 } }
					}
				}
				create_dyn_marauder_fleet = { OUTRIDER = 44 LANCER = 24 CHAMPION = 16 }
			}
			else = {
				create_dyn_marauder_fleet = { OUTRIDER = 22 LANCER = 12 CHAMPION = 8 }
			}
			assign_leader = last_created_leader
			set_location = {
				target = root
				distance = 10
				angle = random
			}
			set_home_base = root.solar_system.starbase
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_very_large_marauder_auxiliaries = {
	optimize_memory
	CmtEffectCreateAdmiral_MarauderEncourager = yes
	create_fleet = {
		name = { key = "NAME_Horde_Auxiliary_Fleet" variable_string = "\\[satrapy_species.GetName\\]" }
		effect = {
			set_owner = event_target:raider_khanate
			set_fleet_flag = horde_auxuliaries
			if = {
				limit = {
					OR = {
						has_global_flag = expanded_spaceborne_installed
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarFleetPower_Khan value > 1.74 } }
					}
				}
				create_dyn_marauder_fleet = { OUTRIDER = 52 LANCER = 36 CHAMPION = 24 }
			}
			else = {
				create_dyn_marauder_fleet = { OUTRIDER = 26 LANCER = 18 CHAMPION = 12 }
			}
			assign_leader = last_created_leader
			set_location = {
				target = root
				distance = 10
				angle = random
			}
			set_home_base = root.solar_system.starbase
		}
		settings = {
			can_upgrade = no
			can_disband = no
			can_change_composition = no
			can_change_leader = no
			uses_naval_capacity = no
		}
	}
}

create_marauder_successor_fleet = {
	random_owned_planet = { save_event_target_as = fleet_position }
	create_fleet = {
		effect = {
			set_owner = prev
			if = {
				limit = {
					OR = {
						has_global_flag = expanded_spaceborne_installed
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarFleetPower_Khan value > 1.74 } }
					}
				}
				create_dyn_marauder_fleet = { OUTRIDER = 32 LANCER = 16 CHAMPION = 12 }
			}
			else = {
				create_dyn_marauder_fleet = { OUTRIDER = 16 LANCER = 8 }
			}
			# assign_leader = last_created_leader
			set_location = {
				target = event_target:fleet_position
				distance = 45
				angle = random
			}
			set_home_base = event_target:fleet_position.solar_system.starbase
		}
		settings = {
			uses_naval_capacity = no
			can_upgrade = no
			can_change_composition = no
		}
	}
	# Fix unlimited leader creation
	if = {
		limit = {
			NOR = {
				count_owned_leader = {
					count > 12
					limit = { leader_class = commander is_event_leader = no }
				}
				any_owned_leader = {
					leader_class = commander
					is_idle = yes
					is_event_leader = no
					is_councilor = no
					is_ruler = no
				}
			}
		}
		create_leader = {
			class = commander
			species = owner_species
			name = random
			skill = 3
			leader_age_min = 25
			leader_age_max = 45
			traits = { trait = leader_trait_mercenary_warrior }
		}
		last_created_fleet = { assign_leader = last_created_leader }
	}
	else = {
		random_owned_leader = {
			limit = {
				leader_class = commander
				is_idle = yes
				is_event_leader = no
				is_councilor = no
				is_ruler = no
			}
			weights = { base = 1 modifier = { add = 4 NOT = { exists = fleet } } }
			last_created_fleet = { assign_leader = prev }
		}
	}
}

# TODO not working (accepts only yes or no as values)
# NUM required
# assign_diadochi_planets = {
# 	# optimize_memory
# 	random_system_within_border = {
# 		limit = {
# 			is_potential_diadochi_system = yes
# 			any_system_colony = {
# 				has_owner = yes
# 				is_owned_by = root
# 				merg_is_habitat = no
# 				OR = {
# 					is_sector_capital = yes
# 					num_sapient_pops > 5
# 				}
# 			}
# 		}
# 		set_star_flag = $NUM$_diadochi_system
# 		save_event_target_as = $NUM$_diadochi_origin
# 		prev = {
# 			effect_on_blob = {
# 				center = prev
# 				owned_planets_percentage = $PCT|0.5$
# 				planet_limit = {
# 					solar_system = {
# 						is_potential_diadochi_system = yes
# 					}
# 				}
# 				effect = {
# 					set_star_flag = $NUM$_diadochi_system
# 				}
# 			}
# 		}
# 		log="Exists diadochi_planet [event_target:first_diadochi_origin.GetName]"
# 	}
# }

assign_first_diadochi_planets = {
	optimize_memory
	random_system_within_border = {
		limit = {
			is_potential_diadochi_system = yes
			any_system_colony = {
				is_owned_by = root
				merg_is_habitat = no
				OR = { is_sector_capital = yes num_sapient_pops > 5 }
			}
		}
		set_star_flag = first_diadochi_system
		save_event_target_as = first_diadochi_origin
		prev = {
			effect_on_blob = {
				center = prev
				owned_planets_percentage = 0.25
				planet_limit = {
					solar_system = { is_potential_diadochi_system = yes }
				}
				effect = { set_star_flag = first_diadochi_system }
			}
		}
	}
}

# Used only once
create_first_diadochi = {
	optimize_memory
	if = {
		limit = { exists = event_target:first_diadochi_origin }
		reroll_random = yes
		get_marauder_species = yes
		create_country = {
			name_list = random
			# name = random
			species = event_target:marauder_species
			type = default
			authority = auth_imperial
			civics = { civic = civic_diadochi civic = random civic = random }
			origin = "origin_khan_successor"
			ethos = {
				ethic = ethic_militarist
				ethic = ethic_xenophobe
				ethic = ethic_authoritarian
			}
			ignore_initial_colony_error = yes
			effect = {
				save_event_target_as = first_diadochi
				set_country_flag = diadochi_1
				set_name = random
				shift_ethic = ethic_fanatic_militarist
			}
		}
		# Flip Starbases
		every_system_within_border = {
			limit = {
				has_star_flag = first_diadochi_system
				exists = starbase
				starbase = { is_owned_by = root }
			}
			starbase = { set_owner = event_target:first_diadochi }
			# Flip Planets
			every_system_colony = {
				limit = { is_owned_by = root }
				set_owner = event_target:first_diadochi
				# set_controller = event_target:first_diadochi
			}
			remove_star_flag = first_diadochi_system
		}
		if = {
			limit = { exists = event_target:raider_khanate }
			event_target:first_diadochi = {
				country_event = { id = khan.610 days = -1 } # Handover some old stuff
			}
		}
	}
}

assign_second_diadochi_planets = {
	optimize_memory
	random_system_within_border = {
		limit = {
			is_potential_diadochi_system = yes
			any_system_colony = {
				is_owned_by = root
				merg_is_habitat = no
				OR = { is_sector_capital = yes num_sapient_pops > 5 }
			}
		}
		set_star_flag = second_diadochi_system
		save_event_target_as = second_diadochi_origin
		prev = {
			effect_on_blob = {
				center = prev
				owned_planets_percentage = 0.33
				planet_limit = {
					solar_system = { is_potential_diadochi_system = yes }
				}
				effect = { set_star_flag = second_diadochi_system }
			}
		}
	}
}

create_second_diadochi = {
	optimize_memory
	if = {
		limit = { exists = event_target:second_diadochi_origin }
		reroll_random = yes
		get_marauder_species = yes
		create_country = {
			name_list = random
			# name = random
			species = event_target:marauder_species
			type = default
			authority = auth_imperial
			civics = { civic = civic_diadochi civic = random civic = random }
			origin = "origin_khan_successor"
			ethos = {
				ethic = ethic_militarist
				ethic = ethic_xenophobe
				ethic = ethic_authoritarian
			}
			ignore_initial_colony_error = yes
			effect = {
				save_event_target_as = second_diadochi
				set_country_flag = diadochi_2
				set_name = random
				shift_ethic = ethic_fanatic_militarist
			}
		}
		# Flip Starbases
		every_system_within_border = {
			limit = {
				has_star_flag = second_diadochi_system
				exists = starbase
				starbase = { is_owned_by = root }
			}
			starbase = { set_owner = event_target:second_diadochi }
			# Flip Planets
			every_system_colony = {
				limit = { is_owned_by = root }
				set_owner = event_target:second_diadochi
				# set_controller = event_target:second_diadochi
			}
			remove_star_flag = second_diadochi_system
		}
		if = {
			limit = { exists = event_target:raider_khanate }
			event_target:second_diadochi = {
				country_event = { id = khan.610 days = -1 } # Handover some old stuff
			}
		}
	}
}

# # Used only once
assign_third_diadochi_planets = {
	optimize_memory
	random_system_within_border = {
		limit = {
			is_potential_diadochi_system = yes
			any_system_colony = {
				is_owned_by = root
				merg_is_habitat = no
				OR = { is_sector_capital = yes num_sapient_pops > 5 }
			}
		}
		set_star_flag = third_diadochi_system
		save_event_target_as = third_diadochi_origin
		prev = {
			effect_on_blob = {
				center = prev
				owned_planets_percentage = 0.5
				planet_limit = {
					solar_system = { is_potential_diadochi_system = yes }
				}
				effect = { set_star_flag = third_diadochi_system }
			}
		}
	}
}

create_third_diadochi = {
	optimize_memory
	if = {
		limit = { exists = event_target:third_diadochi_origin }
		reroll_random = yes
		get_marauder_species = yes
		create_country = {
			name_list = random
			# name = random
			species = event_target:marauder_species
			type = default
			authority = auth_imperial
			civics = { civic = civic_diadochi civic = random civic = random }
			origin = "origin_khan_successor"
			ethos = {
				ethic = ethic_militarist
				ethic = ethic_xenophobe
				ethic = ethic_authoritarian
			}
			ignore_initial_colony_error = yes
			effect = {
				save_event_target_as = third_diadochi
				set_country_flag = diadochi_3
				set_name = random
				shift_ethic = ethic_fanatic_militarist
			}
		}
		# Flip Starbases
		every_system_within_border = {
			limit = {
				has_star_flag = third_diadochi_system
				exists = starbase
				starbase = { is_owned_by = root }
			}
			starbase = { set_owner = event_target:third_diadochi }
			# Flip Planets
			every_system_colony = {
				limit = { is_owned_by = root }
				set_owner = event_target:third_diadochi
				# set_controller = event_target:third_diadochi
			}
			remove_star_flag = third_diadochi_system
		}
		if = {
			limit = { exists = event_target:raider_khanate }
			event_target:third_diadochi = {
				country_event = { id = khan.610 days = -1 } # Handover some old stuff
			}
		}
	}
}

assign_fourth_diadochi_planets = {
	optimize_memory
	random_system_within_border = {
		limit = {
			is_potential_diadochi_system = yes
			any_system_colony = {
				is_owned_by = root
				merg_is_habitat = no
				OR = { is_sector_capital = yes num_sapient_pops > 5 }
			}
		}
		set_star_flag = fourth_diadochi_system
		save_event_target_as = fourth_diadochi_origin
		prev = {
			effect_on_blob = {
				center = prev
				owned_planets_percentage = 1
				planet_limit = {
					solar_system = { is_potential_diadochi_system = yes }
				}
				effect = { set_star_flag = fourth_diadochi_system }
			}
		}
	}
}

create_fourth_diadochi = {
	optimize_memory
	if = {
		limit = { exists = event_target:fourth_diadochi_origin }
		reroll_random = yes
		get_marauder_species = yes
		create_country = {
			name_list = random
			# name = random
			species = event_target:marauder_species
			type = default
			authority = auth_imperial
			civics = { civic = civic_diadochi civic = random civic = random }
			origin = "origin_khan_successor"
			ethos = {
				ethic = ethic_xenophobe
				ethic = ethic_authoritarian
				ethic = ethic_militarist
			}
			ignore_initial_colony_error = yes
			effect = {
				save_event_target_as = fourth_diadochi
				set_country_flag = diadochi_4
				set_name = random
				shift_ethic = ethic_fanatic_militarist
			}
		}
		# Flip Starbases
		every_system_within_border = {
			limit = {
				has_star_flag = fourth_diadochi_system
				exists = starbase
				starbase = { is_owned_by = root }
			}
			starbase = { set_owner = event_target:fourth_diadochi }
			# Flip Planets
			every_system_colony = {
				limit = { is_owned_by = root }
				set_owner = event_target:fourth_diadochi
				# set_controller = event_target:fourth_diadochi
			}
			remove_star_flag = fourth_diadochi_system
		}
		if = {
			limit = { exists = event_target:raider_khanate }
			event_target:fourth_diadochi = {
				country_event = { id = khan.610 days = -1 } # Handover some old stuff
			}
		}
	}
}

# This = System
# Prev = old owner
# prevprev = new owner = $EMPIRE$
commit_system_to = {
	if = {
		limit = {
			has_owner = yes
			is_capital_system = no
			exists = space_owner
			space_owner = {
				is_ai = yes
				NOT = { is_same_empire = $EMPIRE$ }
			}
		}
		set_timed_star_flag = { flag = switched_system days = 3 }
		every_system_colony = {
			limit = {
				has_ground_combat = no
				is_occupied_flag = no
				is_owned_by = space_owner # prev.starbase.owner
			}
			set_owner = $EMPIRE$
			set_controller = $EMPIRE$
		}
		if = {
			limit = { exists = starbase }
			starbase = { set_owner = $EMPIRE$ }
		}
		log="Balcanization preventation: Diadochi system \\[This.GetName] switched to \\[This.starbase.fleet.Owner.GetName]!"
	}
	else = { log="Fail: Diadochi system \\[This.GetName] has same old owner \\[This.starbase.fleet.Owner.GetName]" }
}

# This = root = Marauder
get_marauder_species = {
	# log = "GET MARAUDER SPECIES"
	[[PLANET]
	if = { limit = { exists = prev prev = { is_scope_valid = yes is_scope_type = planet } }
		# log = "GET MARAUDER PLANET SPECIES"
		if = {
			limit = {
				exists = event_target:marauder_country_1	# root = { has_country_flag = marauder_1 }
				OR = {
					prev.solar_system = { has_star_flag = marauder_capital_1 }
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint1
						event_target:CmtTargetMarauderRallyPoint1 = { is_planet = prevprev }
					}
				}
			}
			event_target:marauder_country_1.owner_species = { save_event_target_as = marauder_species }
		}
		else_if = {
			limit = {
				exists = event_target:marauder_country_2
				OR = {
					prev.solar_system = { has_star_flag = marauder_capital_2 }
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint2
						event_target:CmtTargetMarauderRallyPoint2 = { is_planet = prevprev }
					}
				}
			}
			event_target:marauder_country_2.owner_species = { save_event_target_as = marauder_species }
		}
		else_if = {
			limit = {
				exists = event_target:marauder_country_3
				OR = {
					prev.solar_system = { has_star_flag = marauder_capital_3 }
					AND = {
						exists = event_target:CmtTargetMarauderRallyPoint3
						event_target:CmtTargetMarauderRallyPoint3 = { is_planet = prevprev }
					}
				}
			}
			event_target:marauder_country_3.owner_species = { save_event_target_as = marauder_species }
		}
	} ]

	if = {
		limit = {
			OR = {
				# This error log turns me crazy: is_same_species/is_exact_same_species: Unable to resolve species from 'event_target:marauder_species' (no_scope scope)
				NAND = {
					exists = event_target:marauder_species
					event_target:marauder_species = { is_scope_valid = yes }
					event_target:marauder_species = { is_scope_type = species }
					event_target:marauder_species = { species_can_be_necrophaged = yes }
				}
				event_target:marauder_species = {
					OR = {
						is_archetype = LITHOID
						is_archetype = PRESAPIENT
						is_species_class = PLANT
						is_species_class = FUN
					}
				}
			}
			any_owned_pop_species = {
				is_scope_valid = yes
				is_scope_type = species
				OR = {
					species_can_be_necrophaged = yes
					AND = { exists = event_target:great_khan is_same_species = event_target:great_khan.species }
					AND = { exists = prev.owner_species is_same_species = prev.owner_species }
				}
				NOR = {
					is_archetype = LITHOID
					is_species_class = PLANT
					is_species_class = FUN
				}
			}
		}
		random_owned_pop_species = {
		# random_owned_species = {
			limit = {
				is_scope_valid = yes
				is_scope_type = species
				OR = {
					species_can_be_necrophaged = yes
					AND = { exists = event_target:great_khan is_same_species = event_target:great_khan.species }
					AND = { exists = prev.owner_species is_same_species = prev.owner_species }
				}
				NOR = {
					is_archetype = LITHOID
					is_species_class = PLANT
					is_species_class = FUN
				}
			}
			weights = {
				base = 100
				# complex_trigger_modifier = { # Add 10 for each unhappy pop of this species
				# 	trigger = count_owned_pop
				# 	trigger_scope = root
				# 	potential = {
				# 		species_has_happiness_with_owner = root.owner
				# 	}
				# 	parameters = {
				# 		limit = {
				# 			is_same_species = prevprev # Prev should be root.target, prevprev the species
				# 			happiness > 0.5
				# 		}
				# 	}
				# 	mode = add
				# 	mult = 10
				# }
				modifier = {
					factor = 3
					OR = {
						AND = { exists = event_target:great_khan is_same_species = event_target:great_khan.species }
						is_same_species = root.owner_species
					}
				}
				# modifier = { add = 2 prev = { count_owned_pop = { count > 10 limit = { is_same_species = prevprev } } } }
				modifier = {
					factor = 1.5
					prev = {
						count_owned_pop = {
							count > 22
							limit = { is_same_species = prevprev }
						}
					}
				}
				modifier = {
					factor = 2
					prev = { exists = capital_scope capital_scope = { habitability = { who = prevprev value > 0.6 } } }
				}
				modifier = {
					factor = 3
					prev = { any_owned_planet = { is_homeworld = yes is_same_value = prevprev.home_planet } }
				}
				# Division by zero: total random weight is 0, in weights section
				complex_trigger_modifier = { # Multiply it by the percentage of pops of the country
					trigger = pop_percentage
					trigger_scope = root # prev
					parameters = {
						limit = { is_same_species = prevprev }
					}
					mode = mult
				}
			}
			# log="RANDOM OWNED MARAUDER SPECIES"
			save_event_target_as = marauder_species
		}
	}

	if = {
		limit = {
			# This error log turns me crazy: is_same_species/is_exact_same_species: Unable to resolve species from 'event_target:marauder_species' (no_scope scope)
			NAND = {
				exists = event_target:marauder_species
				event_target:marauder_species = { is_scope_valid = yes }
				event_target:marauder_species = { is_scope_type = species }
				pop_percentage = { percentage > 0.2 limit = { is_same_species = prev.owner_species } }
				pop_percentage = { percentage > 0.4 limit = { is_same_species = event_target:marauder_species } }
			}
			any_owned_species = {
				OR = {
					species_can_be_necrophaged = yes
					AND = { exists = event_target:great_khan is_same_species = event_target:great_khan.species }
					AND = { exists = owner_species is_same_species = prev.owner_species }
				}
				NOR = {
					is_archetype = LITHOID
					is_species_class = PLANT
					is_species_class = FUN
				}
			}
		}
		random_owned_species = {
			limit = {
				OR = {
					species_can_be_necrophaged = yes
					AND = { exists = event_target:great_khan is_same_species = event_target:great_khan.species }
					AND = { exists = owner_species is_same_species = prev.owner_species }
				}
				NOR = {
					is_archetype = LITHOID
					is_species_class = PLANT
					is_species_class = FUN
				}
			}
			weights = {
				base = 100
				# complex_trigger_modifier = { # Add 10 for each unhappy pop of this species
				# 	trigger = count_owned_pop
				# 	trigger_scope = prev
				# 	potential = {
				# 		species_has_happiness_with_owner = prev.owner
				# 	}
				# 	parameters = {
				# 		limit = {
				# 			is_same_species = prevprev # Prev should be prev.target, prevprev the species
				# 			happiness > 0.5
				# 		}
				# 	}
				# 	mode = add
				# 	mult = 10
				# }
				modifier = {
					factor = 2
					OR = {
						AND = { exists = event_target:great_khan is_same_species = event_target:great_khan.species }
						is_same_species = root.owner_species
					}
				}
				# Division by zero: total random weight is 0, in weights section
				complex_trigger_modifier = { # Multiply it by the percentage of pops of the country
					trigger = pop_percentage
					trigger_scope = root # prev
					parameters = {
						limit = { is_same_species = prevprev }
					}
					mode = mult
				}
			}
			log="OWNER DOMINANT SPECIES"
			save_event_target_as = marauder_species
		}
	}
	# Common Fallback
	if = {
		limit = {
			# This error log turns me crazy: is_same_species/is_exact_same_species: Unable to resolve species from 'event_target:marauder_species' (no_scope scope)
			NAND = {
				exists = event_target:marauder_species
				event_target:marauder_species = { is_scope_valid = yes }
				event_target:marauder_species = { is_scope_type = species }
			}
		}
		owner_species = { save_event_target_as = marauder_species }
	}
	else_if = {
		limit = {
			pop_percentage = {
				limit = { is_same_species = event_target:marauder_species }
				percentage > 0.65
			}
			OR = {
				AND = {
					exists = event_target:great_khan
					pop_percentage = {
						limit = { is_same_species = event_target:great_khan.species }
						percentage < 0.2
					}
				}
				AND = {
					NOT = { exists = event_target:great_khan.species }
					pop_percentage = {
						limit = { is_same_species = owner_species }
						percentage < 0.25
					}
				}
			}
		}
		change_dominant_species = { species = event_target:marauder_species }
		set_built_species = event_target:marauder_species
	}
}

# Scope = event_target:raiding_marauder
get_marauder_raid_source = {
	random_planet_within_border = {
		limit = { is_star = no }
		weights = {
			base = 1
			modifier = { add = 3 has_planet_flag = raid_source }
			modifier = { add = 1 is_colonizable = yes }
		}
		save_event_target_as = raid_source
	}

	### Rally Point Fallback
	if = {
		limit = { NOT = { exists = event_target:raid_source } }
		switch = { trigger = has_country_flag
			marauder_1 = {
				random_system = {
					limit = { has_star_flag = marauder_capital_1 }
					random_system_planet = {
						limit = { is_star = no }
						weights = {
							base = 1
							modifier = { add = 3 has_planet_flag = raid_source }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_event_target_as = raid_source
					}
				}
			}
			marauder_2 = {
				random_system = {
					limit = { has_star_flag = marauder_capital_2 }
					random_system_planet = {
						limit = { is_star = no }
						weights = {
							base = 1
							modifier = { add = 3 has_planet_flag = raid_source }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_event_target_as = raid_source
					}
				}
			}
			marauder_3 = {
				random_system = {
					limit = { has_star_flag = marauder_capital_3 }
					random_system_planet = {
						limit = { is_star = no }
						weights = {
							base = 1
							modifier = { add = 3 has_planet_flag = raid_source }
							modifier = { add = 1 is_colonizable = yes }
						}
						save_event_target_as = raid_source
					}
				}
			}
		}
	}

	### Last Fallback
	if = {
		limit = { NOT = { exists = event_target:raid_source } }
		# ordered_owned_starbase = {
		random_owned_starbase = {
			limit = {
				exists = solar_system
				solar_system = {
					any_system_planet = { is_star = no }
				}
			}
			# position = 0
			# order_by = fleet.trigger:fleet_power
			solar_system = {
				random_system_planet = {
					limit = { is_star = no }
					weights = {
						base = 1
						modifier = { add = 3 has_planet_flag = raid_source }
						modifier = { add = 1 is_colonizable = yes }
					}
					save_event_target_as = raid_source
				}
			}
		}
	}
	event_target:raid_source = {
		solar_system = { save_event_target_as = marauder_system }
	}
}

# Override needless wasting vanilla effect
set_diadochi_claims = { optimize_memory }

# Update zz_diplo_vanilla_scripted_effects.txt from "Expanded Espionage and Diplomacy"
create_privateer_fleet = {
	# Event targtes created by create_privateer_country.
	event_target:privateer_band = {
		if = {
			limit = {
				has_global_flag = pirate_waves_active
				NOT = { has_global_flag = pirate_waves_PRIVATEER_inactive }
			}
			set_pirates_difficulty = yes
			set_variable = { which = pirates_f_tmp value = pirates_factor }
			# Time passed based modifiers
			get_galaxy_setup_value = { which = mid_year setting = mid_game_year } # 100%
			multiply_variable = { which = mid_year value = 0.5 }
			set_variable = { which = current_year_factor value = trigger:years_passed }
			# Only partial = (cy/my*1.25 + 0.75)/2
			divide_variable = { which = current_year_factor value = mid_year }
			multiply_variable = { which = pirates_f_tmp value = 1.25 }
			change_variable = { which = pirates_f_tmp value = 0.75 }
			multiply_variable = { which = current_year_factor value = 0.5 }
			multiply_variable = { which = pirates_f_tmp value = current_year_factor }
			# round_variable_to_closest = { which = pirates_f_tmp value = 0.001 }
		}
		else = {
			set_variable = { which = pirates_f_tmp value = 1 }
		}

		create_leader = {
			class = commander
			species = owner_species
			name = random
			skill = 1
		}
		create_fleet = {
			name = "NAME_Privateers"
			effect = {
				set_owner = prev
				event_target:target_country = {
					switch = { trigger = fleet_power
						300 < { prev = { create_dyn_pirate_fleet = { Brigand = 1 } } }
						600 < { prev = { create_dyn_pirate_fleet = { Reaver = 2 } } }
						1000 < { prev = { create_dyn_pirate_fleet = { Reaver = 4 Brigand = 2 } } }
						2000 < { prev = { create_dyn_pirate_fleet = { Skull = 7 } } }
						4000 < { prev = { create_dyn_pirate_fleet = { Skull = 11 } } }
						8000 < { prev = { create_dyn_pirate_fleet = { Skull = 10 Corsair = 4 } } }
						12000 < { prev = { create_dyn_pirate_fleet = { Skull = 6 Brigand = 6 Corsair = 6 Black_Earl = 2 } } }
						20000 < { prev = { create_dyn_pirate_fleet = { Skull = 6 Brigand = 6 Marauder = 4 Corsair = 4 Black_Earl = 6 } } }
						30000 < { prev = { create_dyn_pirate_fleet = { Skull = 8 Brigand = 6 Marauder = 4 Corsair = 8 Black_Earl = 8 } } }
						50000 < { prev = { create_dyn_pirate_fleet = { Pirate_Galleon = 1 Corsair = 5 Black_Earl = 3 } } }
						80000 < { prev = { create_dyn_pirate_fleet = { Pirate_Galleon = 1 Skull = 6 Brigand = 6 Corsair = 10 Black_Earl = 6 } } }
						100000 < { prev = { create_dyn_pirate_fleet = { Pirate_Galleon = 2 Skull = 4 Brigand = 4 Corsair = 4 Black_Earl = 3 } } }
						200000 < { prev = { create_dyn_pirate_fleet = { Pirate_Galleon = 2 Skull = 8 Brigand = 8 Corsair = 12 Black_Earl = 8 } } }
						300000 < { prev = { create_dyn_pirate_fleet = { Pirate_Galleon = 3 Skull = 12 Brigand = 12 Corsair = 18 Black_Earl = 12 } } }
						300000 >= { prev = { create_dyn_pirate_fleet = { Pirate_Galleon = 4 Skull = 16 Brigand = 16 Corsair = 24 Black_Earl = 16 } } }
					}
				}
				assign_leader = last_created_leader
				set_location = event_target:privateer_home
				set_fleet_stance = aggressive
				set_aggro_range_measure_from = self
				set_aggro_range = 800
				queue_actions = {
					find_closest_planet = {
						trigger = { id = privateer.x1.trigger.1 is_star = yes }
						found_planet = {
							orbit_planet = this
							wait = { duration = 5 random = 5 }
						}
					}
					repeat = {
						find_closest_system = {
							trigger = {
								id = privateer.x1.trigger.2
								NOR = { has_star_flag = hostile_system has_star_flag = recent_privateer_visit }
								exists = starbase
								starbase = {
									has_starbase_size = starbase_starport
									exists = space_owner
									space_owner = { merg_is_default_empire = yes }
								}
							}
							found_system = { move_to = this }
						}
						find_closest_planet = {
							trigger = { id = privateer.x1.trigger.3 is_star = yes }
							found_planet = {
								orbit_planet = this
								wait = { duration = 5 random = 5 }
								effect = {
									id = create_pirate_fleet_npc.1
									solar_system = {
										set_timed_star_flag = { flag = recent_privateer_visit years = 3 }
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
