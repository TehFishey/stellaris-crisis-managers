
############################################################
############################################################
#####												  #####
#####	Crisis Manager								#####
#####												  #####
#####	Other Scripted Effects for End-Game Crisis	#####
#####												  #####
############################################################
############################################################

################
###  Common  ###
################

CmtEffectSetIntervalFlag = {
	event_target:CmtGlobalVar = {
		remove_global_flag = CmtFlagNowInInterval
		if = {
			limit = { NOT = { check_variable = { which = CmtVarTriggerInterval value < @CmtConstCrisisInterval_T0 } } }
			if = {
				limit = { check_variable = { which = CmtVarTriggerInterval value < @CmtConstCrisisInterval_T1 } }
				set_timed_global_flag = { flag = CmtFlagNowInInterval days = @CmtConstCrisisInterval_D1 }
			}
			else_if = {
				limit = { check_variable = { which = CmtVarTriggerInterval value < @CmtConstCrisisInterval_T2 } }
				set_timed_global_flag = { flag = CmtFlagNowInInterval days = @CmtConstCrisisInterval_D2 }
			}
			else_if = {
				limit = { check_variable = { which = CmtVarTriggerInterval value < @CmtConstCrisisInterval_T3 } }
				set_timed_global_flag = { flag = CmtFlagNowInInterval days = @CmtConstCrisisInterval_D3 }
			}
			else_if = {
				limit = { check_variable = { which = CmtVarTriggerInterval value < @CmtConstCrisisInterval_T4 } }
				set_timed_global_flag = { flag = CmtFlagNowInInterval days = @CmtConstCrisisInterval_D4 }
			}
			else_if = {
				limit = { check_variable = { which = CmtVarTriggerInterval value < @CmtConstCrisisInterval_T5 } }
				set_timed_global_flag = { flag = CmtFlagNowInInterval days = @CmtConstCrisisInterval_D5 }
			}
			else = { set_timed_global_flag = { flag = CmtFlagNowInInterval days = @CmtConstTUnq_ConstCrisisInterval } }
		}
	}
}

CmtEffectFriendlyCrisis = {
	event_target:CmtGlobalVar = {
		if = {
			limit = { check_variable = { which = CmtVarFriendlyCrisis value = 2 } }
			every_country = {
				limit = { CmtTriggerIsExpExds = yes }
				random_country = {
					limit = {
						CmtTriggerIsExpExds = yes
						NOT = { is_same_empire = prev }
					}
					set_faction_hostility = {
						target = prev
						set_hostile = no
						set_neutral = no
						set_friendly = yes
					}
				}
			}
		}
		else_if = {
			limit = {
				OR = {
					check_variable = { which = CmtVarFriendlyCrisis value = 3 }
					check_variable = { which = CmtVarFriendlyCrisis value = 4 }
				}
			}
			every_country = {
				limit = { CmtTriggerIsExpCrisisCountry = yes }
				random_country = {
					limit = {
						CmtTriggerIsExpCrisisCountry = yes
						NOT = { is_same_empire = prev }
					}
					set_faction_hostility = {
						target = prev
						set_hostile = no
						set_neutral = no
						set_friendly = yes
					}
				}
			}
			if = {
				limit = { check_variable = { which = CmtVarFriendlyCrisis value = 3 } }
				every_country = {
					limit = { CmtTriggerIsExpExds = yes }
					random_country = {
						limit = {
							CmtTriggerIsExpExds = yes
							NOT = { is_same_empire = prev }
						}
						set_faction_hostility = {
							target = prev
							set_hostile = yes
							set_neutral = no
							set_friendly = no
						}
					}
				}
			}
		}
		else = {
			every_country = {
				limit = { CmtTriggerIsExpCrisisCountry = yes }
				random_country = {
					limit = {
						CmtTriggerIsExpCrisisCountry = yes
						NOT = { is_same_empire = prev }
					}
					set_faction_hostility = {
						target = prev
						set_hostile = yes
						set_neutral = no
						set_friendly = no
					}
				}
			}
		}
	}
}

CmtEffectHostileCrisis = {
	every_country = {
		limit = { CmtTriggerIsExpCrisisCountry = yes }
		random_country = {
			limit = {
				CmtTriggerIsExpCrisisCountry = yes
				NOT = { is_same_empire = prev }
			}
			set_faction_hostility = {
				target = prev
				set_hostile = yes
				set_neutral = no
				set_friendly = no
			}
		}
	}
	every_country = {
		limit = { is_country_type = portal_holder }
		random_country = {
			limit = {
				CmtTriggerIsExds = yes
				NOT = { is_same_empire = prev }
			}
			set_faction_hostility = {
				target = prev
				set_hostile = no
				set_neutral = no
				set_friendly = yes
			}
		}
	}
	every_country = {
		limit = { CmtTriggerIsExds = yes }
		random_country = {
			limit = {
				is_country_type = portal_holder
				NOT = { is_same_empire = prev }
			}
			set_faction_hostility = {
				target = prev
				set_hostile = no
				set_neutral = no
				set_friendly = yes
			}
		}
	}
}

###########################
###  Extradimensionals  ###
###########################

## Vanilla fix
## Scope: this = Owner Country (Exds)
CmtEffectSaveTargetExdPortal = {
	switch = { trigger = is_country_type
		extradimensional = {
			random_owned_fleet = {
				limit = { has_ship_flag = unbidden_portal }
				save_event_target_as = dimensional_portal
			}
			if = {
				limit = { NOT = { exists = event_target:dimensional_portal } }
				random_country = {
					limit = {
						is_country_type = portal_holder
						any_owned_fleet = { has_ship_flag = unbidden_portal }
					}
					random_owned_fleet = {
						limit = { has_ship_flag = unbidden_portal }
						save_event_target_as = dimensional_portal
					}
				}
			}
		}
		extradimensional_2 = {
			random_owned_fleet = {
				limit = { has_ship_flag = aberrant_portal }
				save_event_target_as = dimensional_portal
			}
			if = {
				limit = { NOT = { exists = event_target:dimensional_portal } }
				random_country = {
					limit = {
						is_country_type = portal_holder
						any_owned_fleet = { has_ship_flag = aberrant_portal }
					}
					random_owned_fleet = {
						limit = { has_ship_flag = aberrant_portal }
						save_event_target_as = dimensional_portal
					}
				}
			}
		}
		extradimensional_3 = {
			random_owned_fleet = {
				limit = { has_ship_flag = vehement_portal }
				save_event_target_as = dimensional_portal
			}
			if = {
				limit = { NOT = { exists = event_target:dimensional_portal } }
				random_country = {
					limit = {
						is_country_type = portal_holder
						any_owned_fleet = { has_ship_flag = vehement_portal }
					}
					random_owned_fleet = {
						limit = { has_ship_flag = vehement_portal }
						save_event_target_as = dimensional_portal
					}
				}
			}
		}
	}
	# Superfluous fallback
	if = {
		limit = { NOT = { exists = event_target:dimensional_portal } }
		if = {
			limit = { any_owned_fleet = { is_ship_size = dimensional_portal_ed } }
			random_owned_fleet = {
				limit = { is_ship_size = dimensional_portal_ed }
				save_event_target_as = dimensional_portal
			}
		}
		else = {
			random_country = {
				limit = {
					is_country_type = portal_holder
					any_owned_fleet = { is_ship_size = dimensional_portal_ed }
				}
				random_owned_fleet = {
					limit = { is_ship_size = dimensional_portal_ed }
					save_event_target_as = dimensional_portal
				}
			}
		}
	}

	if = {
		limit = { NOT = { exists = event_target:extradimensional_species } }
		owner_species = { save_event_target_as = extradimensional_species }
	}
}

CmtEffectReinforcementExdCombat = {		## Scope: this = Owner Country (Exds)
	CmtEffectSaveTargetExdPortal = yes		## save_event_target_as = dimensional_portal
	switch = { trigger = is_country_type
		extradimensional = {
			event_target:dimensional_portal = {
				# CmtEffectCreateAdmiralty_UnbiddenReinforcement
				prev = {
					event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = CmtVarCombatFleetNumber_Unbidden } }
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.875 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -1 } }
						CmtEffectCreateFleet_UnbiddenReinforcement = yes
					}
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.125 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -0.25 } }
						random = { chance = 25
							event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = 0 } }
							CmtEffectCreateFleet_UnbiddenReinforcement = yes
						}
					}
				}
			}
		}
		extradimensional_2 = {
			event_target:dimensional_portal = {
				# CmtEffectCreateAdmiralty_AberrantReinforcement
				prev = {
					event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = CmtVarCombatFleetNumber_Aberrant } }
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.875 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -1 } }
						CmtEffectCreateFleet_AberrantReinforcement = yes
					}
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.125 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -0.25 } }
						random = { chance = 25
							event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = 0 } }
							CmtEffectCreateFleet_AberrantReinforcement = yes
						}
					}
				}
			}
		}
		extradimensional_3 = {
			event_target:dimensional_portal = {
				# CmtEffectCreateAdmiralty_VehementReinforcement
				prev = {
					event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = CmtVarCombatFleetNumber_Vehement } }
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.875 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -1 } }
						CmtEffectCreateFleet_VehementReinforcement = yes
					}
					while = {
						limit = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarWhileControlFleet value > 0.125 } } }
						event_target:CmtGlobalVar = { change_variable = { which = CmtVarWhileControlFleet value = -0.25 } }
						random = { chance = 25
							event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlFleet value = 0 } }
							CmtEffectCreateFleet_VehementReinforcement = yes
						}
					}
				}
			}
		}
	}
}
